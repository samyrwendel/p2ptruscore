// Script para limpar coment√°rios administrativos do banco de dados
require('dotenv').config({ path: '.env.development' });
const { MongoClient } = require('mongodb');

async function cleanAdminComments() {
  const uri = process.env.MONGODB_CNN || 'mongodb://localhost:27017/trustscore';
  console.log('üîó Conectando ao MongoDB:', uri.replace(/:\/\/.*@/, '://***:***@'));
  const client = new MongoClient(uri);
  
  try {
    await client.connect();
    console.log('üîó Conectado ao MongoDB');
    
    const db = client.db('trustscore');
    const karmaCollection = db.collection('karmas');
    
    console.log('üßπ Limpando coment√°rios administrativos...');
    
    // Remover entradas do hist√≥rico que contenham coment√°rios administrativos
    const result = await karmaCollection.updateMany(
      {
        'history.comment': {
          $regex: /pontos adicionados via comando administrativo/i
        }
      },
      {
        $pull: {
          history: {
            comment: {
              $regex: /pontos adicionados via comando administrativo/i
            }
          }
        }
      }
    );
    
    console.log(`‚úÖ ${result.modifiedCount} documentos de karma atualizados`);
    
    // Verificar quantos coment√°rios administrativos restam
    const remaining = await karmaCollection.countDocuments({
      'history.comment': {
        $regex: /pontos adicionados via comando administrativo/i
      }
    });
    
    console.log(`üìä Coment√°rios administrativos restantes: ${remaining}`);
    
    if (remaining === 0) {
      console.log('üéâ Todos os coment√°rios administrativos foram removidos!');
    }
    
  } catch (error) {
    console.error('‚ùå Erro:', error);
  } finally {
    await client.close();
    console.log('üîå Conex√£o fechada');
  }
}

// Executar o script
cleanAdminComments().catch(console.error);