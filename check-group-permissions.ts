// Script para verificar se o grupo -1002907400287 existe no banco e testar permiss√µes do bot
import { NestFactory } from '@nestjs/core';
import { AppModule } from './src/app.module';
import { GroupsService } from './src/groups/groups.service';
import { Telegraf } from 'telegraf';
import { ConfigService } from '@nestjs/config';

async function checkGroupPermissions() {
  console.log('üîç Iniciando verifica√ß√£o do grupo e permiss√µes do bot...');
  
  const app = await NestFactory.createApplicationContext(AppModule);
  const groupsService = app.get(GroupsService);
  const configService = app.get(ConfigService);
  
  const targetGroupId = -1002907400287;
  
  try {
    // 1. Verificar se o grupo existe no banco de dados
    console.log(`\nüìä Verificando se o grupo ${targetGroupId} existe no banco...`);
    
    const groupInDb = await groupsService.getGroupInfo(targetGroupId);
    
    if (groupInDb) {
      console.log('‚úÖ Grupo encontrado no banco de dados:');
      console.log(`   - ID do Grupo: ${groupInDb.groupId}`);
      console.log(`   - Nome: ${groupInDb.groupName || 'Sem nome'}`);
      console.log(`   - ObjectId: ${groupInDb._id}`);
    } else {
      console.log('‚ùå Grupo N√ÉO encontrado no banco de dados');
      console.log('   Isso pode significar que:');
      console.log('   - O bot nunca foi adicionado a este grupo');
      console.log('   - O grupo n√£o existe');
      console.log('   - O ID do grupo est√° incorreto');
    }
    
    // 2. Testar permiss√µes do bot via API do Telegram
    console.log(`\nü§ñ Testando permiss√µes do bot no grupo ${targetGroupId}...`);
    
    const botToken = configService.get<string>('TELEGRAM_BOT_TOKEN');
    if (!botToken) {
      console.log('‚ùå Token do bot n√£o encontrado nas vari√°veis de ambiente');
      return;
    }
    
    const bot = new Telegraf(botToken);
    
    try {
      // Tentar obter informa√ß√µes do chat
      const chatInfo = await bot.telegram.getChat(targetGroupId);
      console.log('‚úÖ Bot tem acesso ao grupo:');
      console.log(`   - T√≠tulo: ${(chatInfo as any).title || 'Sem t√≠tulo'}`);
      console.log(`   - Tipo: ${chatInfo.type}`);
      console.log(`   - ID: ${chatInfo.id}`);
      
      // Tentar obter informa√ß√µes do bot no grupo
      try {
        const botMember = await bot.telegram.getChatMember(targetGroupId, bot.botInfo?.id || 0);
        console.log('‚úÖ Status do bot no grupo:');
        console.log(`   - Status: ${botMember.status}`);
        
        if (botMember.status === 'administrator') {
          console.log('   - Permiss√µes de administrador: ‚úÖ');
          // @ts-ignore
          if (botMember.can_post_messages) console.log('   - Pode enviar mensagens: ‚úÖ');
          // @ts-ignore
          if (botMember.can_edit_messages) console.log('   - Pode editar mensagens: ‚úÖ');
          // @ts-ignore
          if (botMember.can_delete_messages) console.log('   - Pode deletar mensagens: ‚úÖ');
        } else if (botMember.status === 'member') {
          console.log('   - Membro comum (sem permiss√µes especiais)');
        }
        
      } catch (memberError: any) {
        console.log('‚ö†Ô∏è  N√£o foi poss√≠vel obter informa√ß√µes detalhadas do bot no grupo');
        console.log(`   Erro: ${memberError.message}`);
      }
      
      // Testar envio de mensagem (se poss√≠vel)
      try {
        console.log('\nüì§ Testando envio de mensagem...');
        const testMessage = await bot.telegram.sendMessage(
          targetGroupId, 
          'üß™ Teste de permiss√µes do bot - Esta mensagem ser√° deletada automaticamente',
          { disable_notification: true }
        );
        
        console.log('‚úÖ Mensagem enviada com sucesso!');
        console.log(`   - Message ID: ${testMessage.message_id}`);
        
        // Tentar deletar a mensagem de teste
        setTimeout(async () => {
          try {
            await bot.telegram.deleteMessage(targetGroupId, testMessage.message_id);
            console.log('‚úÖ Mensagem de teste deletada com sucesso');
          } catch (deleteError: any) {
            console.log('‚ö†Ô∏è  N√£o foi poss√≠vel deletar a mensagem de teste');
            console.log(`   Erro: ${deleteError.message}`);
          }
        }, 2000);
        
      } catch (sendError: any) {
        console.log('‚ùå N√£o foi poss√≠vel enviar mensagem para o grupo');
        console.log(`   Erro: ${sendError.message}`);
        
        if (sendError.message.includes('chat not found')) {
          console.log('   üí° O grupo pode n√£o existir ou o bot foi removido');
        } else if (sendError.message.includes('not enough rights')) {
          console.log('   üí° Bot n√£o tem permiss√£o para enviar mensagens');
        } else if (sendError.message.includes('bot was blocked')) {
          console.log('   üí° Bot foi bloqueado no grupo');
        }
      }
      
    } catch (chatError: any) {
      console.log('‚ùå N√£o foi poss√≠vel acessar o grupo via API do Telegram');
      console.log(`   Erro: ${chatError.message}`);
      
      if (chatError.message.includes('chat not found')) {
        console.log('   üí° Poss√≠veis causas:');
        console.log('      - O grupo n√£o existe');
        console.log('      - O bot foi removido do grupo');
        console.log('      - O ID do grupo est√° incorreto');
        console.log('      - O grupo √© privado e o bot n√£o tem acesso');
      }
    }
    
    // 3. Verificar outros grupos no banco para compara√ß√£o
    console.log('\nüìã Verificando outros grupos no banco de dados...');
    const allGroupIds = await groupsService.getDistinctGroupIds();
    console.log(`   Total de grupos no banco: ${allGroupIds.length}`);
    
    if (allGroupIds.length > 0) {
      console.log('   Primeiros 5 grupos:');
      allGroupIds.slice(0, 5).forEach((id, index) => {
        console.log(`   ${index + 1}. ${id}`);
      });
      
      // Verificar se existe algum grupo similar
      const similarGroups = allGroupIds.filter(id => 
        id.toString().includes('2907400287') || 
        Math.abs(id - targetGroupId) < 1000
      );
      
      if (similarGroups.length > 0) {
        console.log('   üîç Grupos similares encontrados:');
        similarGroups.forEach(id => console.log(`      - ${id}`));
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erro durante a verifica√ß√£o:', error);
  } finally {
    await app.close();
  }
  
  console.log('\nüèÅ Verifica√ß√£o conclu√≠da!');
}

// Executar o script
checkGroupPermissions().catch(console.error);