import { Injectable, Logger } from '@nestjs/common';
import { ITextCommandHandler, TextCommandContext } from '../../telegram.types';
import { TelegramKeyboardService } from '../../shared/telegram-keyboard.service';
import { KarmaService } from '../../../karma/karma.service';
import { UsersService } from '../../../users/users.service';
import { TermsAcceptanceService } from '../../../users/terms-acceptance.service';
import { OperationsService } from '../../../operations/operations.service';
import { getReputationInfo } from '../../../shared/reputation.utils';
import { formatKarmaHistory } from '../command.helpers';
import { CriarOperacaoCommandHandler } from './criar-operacao.command.handler';
import { ReputacaoCommandHandler } from './reputacao.command.handler';

@Injectable()
export class StartCommandHandler implements ITextCommandHandler {
  private readonly logger = new Logger(StartCommandHandler.name);
  command = /^\/start(?:@\w+)?(?:\s+(.+))?$/;

  constructor(
    private readonly keyboardService: TelegramKeyboardService,
    private readonly karmaService: KarmaService,
    private readonly usersService: UsersService,
    private readonly termsAcceptanceService: TermsAcceptanceService,
    private readonly operationsService: OperationsService,
    private readonly criarOperacaoHandler: CriarOperacaoCommandHandler,
    private readonly reputacaoHandler: ReputacaoCommandHandler,
  ) {}

  private async getKarmaForUserWithFallback(user: any, chatId: number): Promise<any> {
    try {
      // Primeiro tentar buscar karma no grupo atual
      const groupKarma = await this.karmaService.getKarmaForUser(user.userId, chatId);
      
      if (groupKarma && groupKarma.karma !== undefined) {
        return groupKarma;
      }
      
      // Se n√£o encontrar no grupo atual, buscar karma total
      const totalKarma = await this.karmaService.getTotalKarmaForUser(user.userName || user.firstName);
      
      if (totalKarma) {
        // Buscar hist√≥rico de qualquer grupo onde o usu√°rio tenha dados
        let karmaWithHistory = await this.karmaService.getKarmaForUser(user.userId, -1002907400287);
        
        // Se n√£o encontrar no grupo principal, buscar em qualquer grupo
         if (!karmaWithHistory || (!karmaWithHistory.history && (!karmaWithHistory.stars5 && !karmaWithHistory.stars4 && !karmaWithHistory.stars3 && !karmaWithHistory.stars2 && !karmaWithHistory.stars1))) {
           // Buscar todos os grupos onde o usu√°rio tem karma usando o UsersService
           const userGroups = await this.karmaService.getGroupsForUser(user.userId);
           if (userGroups && userGroups.length > 0) {
             // Tentar buscar karma em cada grupo at√© encontrar um com hist√≥rico
             for (const group of userGroups) {
               const groupKarma = await this.karmaService.getKarmaForUser(user.userId, group.groupId);
               if (groupKarma && (groupKarma.history?.length > 0 || groupKarma.stars5 > 0)) {
                 karmaWithHistory = groupKarma;
                 break;
               }
             }
           }
         }
        
        // Simular estrutura de karma do grupo para compatibilidade
        return {
          karma: totalKarma.totalKarma,
          givenKarma: totalKarma.totalGiven,
          givenHate: totalKarma.totalHate,
          user: totalKarma.user,
          history: karmaWithHistory?.history || [],
          stars5: karmaWithHistory?.stars5 || 0,
          stars4: karmaWithHistory?.stars4 || 0,
          stars3: karmaWithHistory?.stars3 || 0,
          stars2: karmaWithHistory?.stars2 || 0,
          stars1: karmaWithHistory?.stars1 || 0
        };
      }
      
      return null;
    } catch (error) {
      console.error('Erro ao buscar karma com fallback:', error);
      return null;
    }
  }

  async handle(ctx: TextCommandContext): Promise<void> {
    // VERIFICA√á√ÉO PRIORIT√ÅRIA: Se usu√°rio n√£o aceitou termos em grupos, apresentar termos primeiro
    if (ctx.chat.type !== 'private') {
      const hasAccepted = await this.termsAcceptanceService.hasUserAcceptedCurrentTerms(
        ctx.from.id,
        ctx.chat.id
      );

      if (!hasAccepted) {
        await this.presentTermsInStart(ctx);
        return;
      }
    }

    const match = ctx.message.text.match(this.command);
    const startParam = match?.[1];

    // Se h√° par√¢metro de start e √© relacionado √† reputa√ß√£o
    if (startParam && startParam.startsWith('reputacao_')) {
      const userId = startParam.replace('reputacao_', '');
      
      try {
        let karmaData;
        let targetUser;
        
        // Verificar se userId √© num√©rico (ID do Telegram) ou texto (nome/username)
        if (/^\d+$/.test(userId)) {
          // √â um ID num√©rico, buscar usu√°rio pelo ID primeiro
          const user = await this.usersService.findOneByUserId(parseInt(userId));
          if (!user) {
            // Verificar se estamos em um contexto de callback (refreshReputation)
            if (ctx.callbackQuery) {
              await ctx.answerCbQuery(`‚ùå Usu√°rio n√£o encontrado.`, { show_alert: true });
            } else {
              await ctx.reply(`‚ùå Usu√°rio n√£o encontrado.`);
            }
            return;
          }
          
          // Usar o nome de usu√°rio ou firstName para buscar karma
          const userIdentifier = user.userName || user.firstName || userId;
          karmaData = await this.karmaService.getTotalKarmaForUser(userIdentifier);
          targetUser = user;
        } else {
          // √â um nome/username, buscar diretamente
          karmaData = await this.karmaService.getTotalKarmaForUser(userId);
          if (!karmaData) {
            // Verificar se estamos em um contexto de callback (refreshReputation)
            if (ctx.callbackQuery) {
              await ctx.answerCbQuery(`‚ùå Usu√°rio "${userId}" n√£o encontrado.`, { show_alert: true });
            } else {
              await ctx.reply(`‚ùå Usu√°rio "${userId}" n√£o encontrado.`);
            }
            return;
          }
          targetUser = karmaData.user;
        }
        const karmaValue = karmaData.totalKarma;
        const avaliacoesPositivas = karmaData.totalGiven;
        const avaliacoesNegativas = karmaData.totalHate;

        // Determinar n√≠vel de confian√ßa usando fun√ß√£o utilit√°ria
        const reputationInfo = getReputationInfo(karmaValue);
        const nivelConfianca = reputationInfo.nivel;
        const nivelIcon = reputationInfo.icone;

        const userName = targetUser.userName ? `@${targetUser.userName}` : targetUser.firstName || 'Usu√°rio';
        
        // Buscar hist√≥rico de avalia√ß√µes do usu√°rio
        const karmaDoc = await this.getKarmaForUserWithFallback(targetUser, ctx.chat.id);
        
        // Contadores de estrelas em formato de 2 colunas
        const stars5 = karmaDoc?.stars5 || 0;
        const stars4 = karmaDoc?.stars4 || 0;
        const stars3 = karmaDoc?.stars3 || 0;
        const stars2 = karmaDoc?.stars2 || 0;
        const stars1 = karmaDoc?.stars1 || 0;
        
        const starCounters = `5‚≠êÔ∏è: ${stars5}      2‚≠êÔ∏è: ${stars2}\n4‚≠êÔ∏è: ${stars4}      1‚≠êÔ∏è: ${stars1}\n3‚≠êÔ∏è: ${stars3}`;
        
        let historyMessage = 'Nenhuma avalia√ß√£o encontrada.';
        if (karmaDoc && karmaDoc.history && karmaDoc.history.length > 0) {
          const recentHistory = karmaDoc.history.slice(-10); // √öltimas 10 avalia√ß√µes
          historyMessage = recentHistory
            .reverse()
            .map((entry) => {
              let result = '';
              
              // Se tem starRating, mostrar estrelas
              if (entry.starRating) {
                const starEmojis = '‚≠ê'.repeat(entry.starRating);
                const evaluatorName = entry.evaluatorName ? `@${entry.evaluatorName}` : 'An√¥nimo';
                result = `${starEmojis}: "${entry.comment || 'Sem coment√°rio'}" - ${evaluatorName}`;
              } else {
                // Formato antigo (compatibilidade)
                const emoji = entry.karmaChange > 0 ? 'üëç' : 'üëé';
                const evaluatorName = entry.evaluatorName ? `@${entry.evaluatorName}` : 'An√¥nimo';
                result = `${emoji}: "${entry.comment || 'Avalia√ß√£o P2P'}" - ${evaluatorName}`;
              }
              
              return result;
            })
            .join('\n\n');
        }
        
        const message = 
          `**Reputa√ß√£o P2P do Criador da Opera√ß√£o**\n` +
          `üë§ **Usu√°rio:** ${userName}\n\n` +
          `${nivelIcon} **N√≠vel:** ${nivelConfianca}\n` +
          `‚≠êÔ∏è **Score Total:** ${karmaValue} pts\n\n` +
          `**Distribui√ß√£o de Avalia√ß√µes:**\n${starCounters}\n\n\n` +
          `üìã **√öltimas 10 Avalia√ß√µes Recebidas:**\n\n${historyMessage}`;
        
        // Criar bot√µes de navega√ß√£o melhorados
        const keyboard = {
          inline_keyboard: [
            [
              {
                text: '5‚≠ê',
                callback_data: `reputation_filter_star_5_${targetUser.userId}`
              },
              {
                text: '4‚≠ê',
                callback_data: `reputation_filter_star_4_${targetUser.userId}`
              },
              {
                text: '3‚≠ê',
                callback_data: `reputation_filter_star_3_${targetUser.userId}`
              }
            ],
            [
              {
                text: '2‚≠ê',
                callback_data: `reputation_filter_star_2_${targetUser.userId}`
              },
              {
                text: '1‚≠ê',
                callback_data: `reputation_filter_star_1_${targetUser.userId}`
              },
              {
                text: 'üîÑÔ∏è Atualizar',
                callback_data: `reputation_refresh_${targetUser.userId}`
              }
            ],
            [
              {
                text: '‚ùå',
                callback_data: `reputation_close_${targetUser.userId}`
              },
              {
                text: '‚û°Ô∏è',
                callback_data: `reputation_more_${targetUser.userId}_10`
              }
            ]
          ]
        };
        
        await ctx.reply(message, { 
          parse_mode: 'Markdown',
          reply_markup: keyboard
        });
        return;
        
      } catch (error) {
        this.logger.error('Erro ao buscar reputa√ß√£o via start:', error);
        await ctx.reply('‚ùå Erro ao buscar reputa√ß√£o. Tente novamente.');
        return;
      }
    }

    // Mensagem padr√£o de boas-vindas com bot√µes principais
    const welcomeMessage = 
      'üéâ **Bem-vindo ao P2P Score Bot!**\n\n' +
      'üöÄ **Principais funcionalidades:**\n' +
      '‚Ä¢ üí∞ Criar e gerenciar opera√ß√µes P2P\n' +
      '‚Ä¢ ‚≠ê Ver reputa√ß√£o e hist√≥rico de usu√°rios\n' +
      '‚Ä¢ üìä Avaliar transa√ß√µes e parceiros\n' +
      '‚Ä¢ üí± Consultar cota√ß√µes atuais\n\n' +
      'üëá **Use os bot√µes abaixo para navegar rapidamente:**';

    const mainCommandsKeyboard = {
      inline_keyboard: [
        [
          {
            text: 'üí∞ Criar Opera√ß√£o',
            callback_data: 'start_create_operation'
          },
          {
            text: 'üìã Minhas Opera√ß√µes',
            callback_data: 'start_my_operations'
          }
        ],
        [
          {
            text: '‚≠ê Minha Reputa√ß√£o',
            callback_data: 'start_my_reputation'
          },
          {
            text: 'üí± Cota√ß√µes',
            callback_data: 'start_quotes'
          }
        ],
        [
          {
            text: 'üìä Ver Opera√ß√µes',
            callback_data: 'start_view_operations'
          },
          {
            text: '‚ùì Ajuda',
            callback_data: 'start_help'
          }
        ]
      ]
    };

    await ctx.reply(welcomeMessage, { 
      parse_mode: 'Markdown', 
      reply_markup: mainCommandsKeyboard 
    });
  }

  // M√©todo para lidar com callbacks dos bot√µes
  async handleCallback(ctx: any): Promise<boolean> {
    const data = ctx.callbackQuery.data;
    
    // Verificar se este callback pertence a este handler
    if (!data.startsWith('reputation_') && !data.startsWith('start_')) {
      return false;
    }
    
    // Handlers para bot√µes do comando /start
    if (data.startsWith('start_')) {
      try {
        if (data === 'start_create_operation') {
          await ctx.answerCbQuery('ü§ù Iniciando cria√ß√£o de opera√ß√£o...');
          
          // Verificar se j√° est√° no chat privado
          if (ctx.callbackQuery.message.chat.type === 'private') {
            // J√° est√° no privado, chamar diretamente o /criaroperacao
            const fakeCtx = {
              from: ctx.from,
              message: { 
                text: '/criaroperacao', 
                chat: ctx.callbackQuery.message.chat,
                message_id: ctx.callbackQuery.message.message_id,
                date: Math.floor(Date.now() / 1000)
              },
              chat: ctx.callbackQuery.message.chat,
              reply: async (text: string, extra?: any) => {
                return await ctx.editMessageText(text, extra);
              },
              sendChatAction: async () => {},
              editMessageText: ctx.editMessageText.bind(ctx)
            } as TextCommandContext;
            
            // Chamar exatamente a mesma fun√ß√£o que o comando /criaroperacao
            await this.criarOperacaoHandler.handle(fakeCtx);
          } else {
            // Est√° em grupo, redirecionar para privado
            await ctx.editMessageText(
              'ü§ù **Criar Opera√ß√£o P2P**\n\n' +
              'üí° Para criar uma opera√ß√£o, voc√™ precisa usar o chat privado com o bot.\n\n' +
              '**Clique no bot√£o abaixo para iniciar:**',
              { 
                parse_mode: 'Markdown',
                reply_markup: {
                  inline_keyboard: [
                    [
                      {
                        text: 'ü§ù Abrir Chat Privado',
                        url: 'https://t.me/p2pscorebot?start=criar_operacao'
                      }
                    ],
                    [
                      {
                        text: 'üîô Voltar ao Menu',
                        callback_data: 'back_to_start_menu'
                      }
                    ]
                  ]
                }
              }
            );
          }
        } else if (data === 'start_my_operations') {
          await ctx.answerCbQuery('üìã Carregando suas opera√ß√µes...');
          await this.showUserOperations(ctx);
        } else if (data === 'start_my_reputation') {
          await ctx.answerCbQuery('‚≠ê Carregando sua reputa√ß√£o...');
          // Simular comando /reputacao exatamente
          const fakeCtx = {
            from: ctx.from,
            message: { 
              text: '/reputacao', 
              chat: ctx.callbackQuery.message.chat,
              message_id: ctx.callbackQuery.message.message_id,
              date: Math.floor(Date.now() / 1000)
            },
            chat: ctx.callbackQuery.message.chat,
            reply: async (text: string, extra?: any) => {
              return await ctx.editMessageText(text, extra);
            },
            sendChatAction: async () => {},
            editMessageText: ctx.editMessageText.bind(ctx)
          } as TextCommandContext;
          
          // Chamar exatamente a mesma fun√ß√£o que o comando /reputacao
          await this.reputacaoHandler.handle(fakeCtx);
        } else if (data === 'start_quotes') {
          await ctx.answerCbQuery('üí± Carregando cota√ß√µes...');
          await this.showQuotesMenu(ctx);
        } else if (data === 'start_view_operations') {
          await ctx.answerCbQuery('üìä Carregando opera√ß√µes...');
          await this.showAvailableOperations(ctx);
        } else if (data === 'start_help') {
          await ctx.answerCbQuery('‚ùì Carregando ajuda...');
          await this.showHelpMenu(ctx);
        } else if (data === 'start_operation_flow') {
          await ctx.answerCbQuery('üöÄ Iniciando cria√ß√£o...');
          // Simular comando /criaroperacao exatamente
          const fakeCtx = {
            from: ctx.from,
            message: { 
              text: '/criaroperacao', 
              chat: ctx.callbackQuery.message.chat,
              message_id: ctx.callbackQuery.message.message_id,
              date: Math.floor(Date.now() / 1000)
            },
            chat: ctx.callbackQuery.message.chat,
            reply: ctx.reply ? ctx.reply.bind(ctx) : async (text: string, extra?: any) => {
              return await ctx.editMessageText(text, extra);
            },
            sendChatAction: ctx.sendChatAction ? ctx.sendChatAction.bind(ctx) : async () => {},
            editMessageText: ctx.editMessageText.bind(ctx)
          } as TextCommandContext;
          
          // Chamar exatamente a mesma fun√ß√£o que o comando /criaroperacao
          await this.criarOperacaoHandler.handle(fakeCtx);
        } else if (data === 'back_to_start_menu') {
          await ctx.answerCbQuery('üè† Voltando ao menu...');
          await this.showStartMenu(ctx);
        }
        return true;
      } catch (error) {
        this.logger.error('Erro ao processar callback do start:', error);
        await ctx.answerCbQuery('‚ùå Erro ao processar a√ß√£o', { show_alert: true });
        return true;
      }
    }
    
    try {
      if (data.startsWith('reputation_filter_star_')) {
        const parts = data.replace('reputation_filter_star_', '').split('_');
        const starRating = parts[0];
        const userId = parts[1];
        await this.showFilteredStarReviews(ctx, userId, parseInt(starRating));
      } else if (data.startsWith('reputation_filter_positive_')) {
        const userId = data.replace('reputation_filter_positive_', '');
        await this.showFilteredReviews(ctx, userId, 'positive');
      } else if (data.startsWith('reputation_filter_negative_')) {
        const userId = data.replace('reputation_filter_negative_', '');
        await this.showFilteredReviews(ctx, userId, 'negative');
      } else if (data.startsWith('reputation_more_')) {
        const parts = data.replace('reputation_more_', '').split('_');
        const userId = parts[0];
        const currentOffset = parseInt(parts[1]) || 10;
        await this.showMoreReviews(ctx, userId, currentOffset);
      } else if (data.startsWith('reputation_refresh_')) {
        const userId = data.replace('reputation_refresh_', '');
        await this.refreshReputation(ctx, userId);
        return true; // ‚úÖ Sair ap√≥s processar para evitar answerCbQuery duplicado
      } else if (data.startsWith('reputation_close_')) {
        await ctx.deleteMessage();
        return true;
      }
      
      try {
        await ctx.answerCbQuery();
        return true; // Callback processado com sucesso
      } catch (cbError) {
        // Ignorar erro de callback expirado
        if (cbError.message && cbError.message.includes('query is too old')) {
          this.logger.warn('Callback query expirado - ignorando:', cbError.message);
          return true; // Ainda consideramos como processado
        } else {
          this.logger.error('Erro ao responder callback query:', cbError);
          return false; // Erro no processamento
        }
      }
    } catch (error) {
      this.logger.error('Erro ao processar callback de reputa√ß√£o no start handler:', error);
      try {
        await ctx.answerCbQuery('‚ùå Erro ao processar a√ß√£o', { show_alert: true });
      } catch (cbError) {
        // Ignorar erro de callback expirado
        this.logger.warn('Callback query expirado no tratamento de erro:', cbError.message);
      }
      return false; // Erro no processamento
    }
  }

  private async showFilteredStarReviews(ctx: any, userId: string, starRating: number): Promise<void> {
    try {
      const user = await this.usersService.findOneByUserId(parseInt(userId));
      if (!user) return;
      
      const karmaDoc = await this.getKarmaForUserWithFallback(user, ctx.chat.id);
      const history = karmaDoc?.history || [];
      
      const filteredHistory = history.filter(entry => 
        entry.starRating === starRating
      ).slice(-10);
      
      const userName = user.userName ? `@${user.userName}` : user.firstName || 'Usu√°rio';
      const scoreTotal = karmaDoc?.karma || 0;
      const reputationInfo = getReputationInfo(karmaDoc);
      const nivelConfianca = reputationInfo.nivel;
      const nivelIcon = reputationInfo.icone;
      
      const starEmojis = '‚≠ê'.repeat(starRating);
      let message = `**Reputa√ß√£o P2P do Criador da Opera√ß√£o**\n` +
                   `üë§ **Usu√°rio:** ${userName}\n\n` +
                   `${nivelIcon} **N√≠vel:** ${nivelConfianca}\n` +
                   `‚≠êÔ∏è **Score Total:** ${scoreTotal} pts\n\n` +
                   `${starEmojis} **Avalia√ß√µes ${starRating} Estrelas:**\n\n`;
      
      if (filteredHistory.length === 0) {
        message += `Nenhuma avalia√ß√£o ${starRating} estrelas encontrada.`;
      } else {
        message += filteredHistory
          .reverse()
          .map(entry => {
            const evaluatorName = entry.evaluatorName ? `@${entry.evaluatorName}` : 'An√¥nimo';
            return `${starEmojis}: "${entry.comment || 'Sem coment√°rio'}" - ${evaluatorName}`;
          })
          .join('\n\n');
      }
      
      const keyboard = {
        inline_keyboard: [
          [
            {
              text: 'üîô Voltar',
              callback_data: `reputation_refresh_${userId}`
            }
          ]
        ]
      };
      
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
    } catch (error) {
      this.logger.error('Erro ao filtrar avalia√ß√µes por estrelas no start handler:', error);
    }
  }

  private async showFilteredReviews(ctx: any, userId: string, filter: 'positive' | 'negative'): Promise<void> {
    try {
      const user = await this.usersService.findOneByUserId(parseInt(userId));
      if (!user) return;
      
      const karmaDoc = await this.getKarmaForUserWithFallback(user, ctx.chat.id);
      const history = karmaDoc?.history || [];
      
      const filteredHistory = history.filter(entry => 
        filter === 'positive' ? entry.karmaChange > 0 : entry.karmaChange < 0
      ).slice(-10);
      
      let message = `üìã **Avalia√ß√µes ${filter === 'positive' ? 'Positivas' : 'Negativas'}:**\n\n`;
      
      if (filteredHistory.length === 0) {
        message += `Nenhuma avalia√ß√£o ${filter === 'positive' ? 'positiva' : 'negativa'} encontrada.`;
      } else {
        message += filteredHistory
          .reverse()
          .map(entry => {
            const dateString = new Date(entry.timestamp).toLocaleDateString('pt-BR');
            let result = '';
            
            // Se tem starRating, mostrar estrelas
            if (entry.starRating) {
              const starEmojis = '‚≠ê'.repeat(entry.starRating);
              result = `${starEmojis} ${entry.starRating}‚≠ê`;
            } else {
              // Fallback para o formato antigo
              const sign = entry.karmaChange > 0 ? '+' : '';
              const emoji = entry.karmaChange > 0 ? 'üëç' : 'üëé';
              result = `${emoji} ${sign}${entry.karmaChange} pts`;
            }
            
            if (entry.evaluatorName) {
              result += ` (por ${entry.evaluatorName})`;
            }
            
            if (entry.comment) {
              result += `\n    üí¨ "${entry.comment}"`;
            }
            
            result += ` - ${dateString}`;
            
            return result;
          })
          .join('\n\n');
      }
      
      const keyboard = {
        inline_keyboard: [
          [
            {
              text: 'üîô Voltar',
              callback_data: `reputation_refresh_${userId}`
            }
          ]
        ]
      };
      
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
    } catch (error) {
      this.logger.error('Erro ao filtrar avalia√ß√µes no start handler:', error);
    }
  }

  private async showMoreReviews(ctx: any, userId: string, currentOffset: number): Promise<void> {
    try {
      const user = await this.usersService.findOneByUserId(parseInt(userId));
      if (!user) return;
      
      const karmaDoc = await this.getKarmaForUserWithFallback(user, ctx.chat.id);
      const history = karmaDoc?.history || [];
      
      const nextBatch = history.slice(-(currentOffset + 10), -currentOffset);
      
      let message = `üìã **Avalia√ß√µes Anteriores:**\n\n`;
      
      if (nextBatch.length === 0) {
        message += 'N√£o h√° mais avalia√ß√µes para mostrar.';
      } else {
        message += nextBatch
          .reverse()
          .map(entry => {
            const dateString = new Date(entry.timestamp).toLocaleDateString('pt-BR');
            let result = '';
            
            // Se tem starRating, mostrar estrelas
            if (entry.starRating) {
              const starEmojis = '‚≠ê'.repeat(entry.starRating);
              result = `${starEmojis} ${entry.starRating}‚≠ê`;
            } else {
              // Fallback para o formato antigo
              const sign = entry.karmaChange > 0 ? '+' : '';
              const emoji = entry.karmaChange > 0 ? 'üëç' : 'üëé';
              result = `${emoji} ${sign}${entry.karmaChange} pts`;
            }
            
            if (entry.evaluatorName) {
              result += ` (por ${entry.evaluatorName})`;
            }
            
            if (entry.comment) {
              result += `\n    üí¨ "${entry.comment}"`;
            }
            
            result += ` - ${dateString}`;
            
            return result;
          })
          .join('\n\n');
      }
      
      const keyboard = {
        inline_keyboard: [
          [
            {
              text: 'üìã Ver Mais',
              callback_data: `reputation_more_${userId}_${currentOffset + 10}`
            },
            {
              text: 'üîô Voltar',
              callback_data: `reputation_refresh_${userId}`
            }
          ]
        ]
      };
      
      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
    } catch (error) {
      this.logger.error('Erro ao mostrar mais avalia√ß√µes no start handler:', error);
    }
  }

  private async refreshReputation(ctx: any, userId: string): Promise<void> {
    try {
      // Tentar responder ao callback, mas ignorar se expirado
      try {
        await ctx.answerCbQuery();
      } catch (cbError: any) {
        if (cbError.description?.includes('query is too old') || cbError.description?.includes('query ID is invalid')) {
          this.logger.warn('Callback query expirado no start refresh, continuando processamento:', cbError.description);
        } else {
          throw cbError; // Re-lan√ßar outros erros
        }
      }
      
      let userIdentifier = userId;
      
      // Verificar se userId √© num√©rico (ID do Telegram) ou texto (nome/username)
      if (/^\d+$/.test(userId)) {
        // √â um ID num√©rico, buscar usu√°rio pelo ID primeiro
        const user = await this.usersService.findOneByUserId(parseInt(userId));
        if (!user) {
          await ctx.answerCbQuery('‚ùå Usu√°rio n√£o encontrado', { show_alert: true });
          return;
        }
        
        // Usar o nome de usu√°rio ou firstName para a busca
        userIdentifier = user.userName || user.firstName || userId;
      }
      
      // Simular o comando original para o usu√°rio espec√≠fico
      const fakeCtx = {
        ...ctx,
        message: {
          text: `/start reputacao_${userIdentifier}`,
          from: ctx.callbackQuery.from
        },
        from: ctx.callbackQuery.from,
        chat: ctx.callbackQuery.message.chat,
        callbackQuery: ctx.callbackQuery, // ‚úÖ Preservar callbackQuery para detec√ß√£o de contexto
        reply: async (text: string, options?: any) => {
          return ctx.editMessageText(text, {
            ...options,
            message_id: ctx.callbackQuery.message.message_id,
            chat_id: ctx.callbackQuery.message.chat.id
          });
        },
        answerCbQuery: ctx.answerCbQuery.bind(ctx) // ‚úÖ Adicionar answerCbQuery ao fakeCtx
      };
      
      await this.handle(fakeCtx);
    } catch (error) {
      this.logger.error('Erro ao atualizar reputa√ß√£o no start handler:', error);
      try {
        await ctx.answerCbQuery('‚ùå Erro ao atualizar reputa√ß√£o', { show_alert: true });
      } catch (cbError: any) {
        if (cbError.description?.includes('query is too old') || cbError.description?.includes('query ID is invalid')) {
          this.logger.warn('Callback query expirado no tratamento de erro do start:', cbError.description);
        } else {
          this.logger.error('Erro ao responder callback de erro:', cbError);
        }
      }
    }
  }

  private async presentTermsInStart(ctx: TextCommandContext): Promise<void> {
    const userName = ctx.from.username ? `@${ctx.from.username}` : ctx.from.first_name;
    const termsText = this.termsAcceptanceService.getTermsText();
    
    const message = (
      `üéâ **Bem-vindo(a) ao TrustScore P2P, ${userName}!**\n\n` +
      termsText + `\n\n` +
      `üë§ **Usu√°rio:** ${userName}\n` +
      `üÜî **ID:** \`${ctx.from.id}\`\n` +
      `üìÖ **Data:** ${new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' })}\n\n` +
      `‚ö†Ô∏è **IMPORTANTE:** Voc√™ precisa aceitar estes termos para usar o bot no grupo.`
    );

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: '‚úÖ ACEITO OS TERMOS',
            callback_data: `accept_terms_${ctx.from.id}_${ctx.chat.id}`
          },
          {
            text: '‚ùå N√ÉO ACEITO',
            callback_data: `reject_terms_${ctx.from.id}_${ctx.chat.id}`
          }
        ],
        [
          {
            text: 'üìã Ver Termos Detalhados',
            callback_data: `view_terms_detail_${ctx.from.id}_${ctx.chat.id}`
          }
        ]
      ]
    };

    await ctx.reply(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  }

  private async showQuotesMenu(ctx: any): Promise<void> {
    const message = (
      '**Central de Cota√ß√µes TrustScore**\n\n' +
      'Escolha uma op√ß√£o para ver as cota√ß√µes atuais:\n\n' +
      '**Principais Stablecoins**\n' +
      '‚Ä¢ USD, USDT, USDC, DAI\n\n' +
      '**Criptomoedas Principais**\n' +
      '‚Ä¢ Bitcoin, Ethereum, Solana\n\n' +
      '**Moedas Tradicionais**\n' +
      '‚Ä¢ Euro, Real\n\n' +
      '**R√°pido:** Veja todas as cota√ß√µes de uma vez'
    );

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: 'üìä Todas as Cota√ß√µes',
            callback_data: 'quotes_all'
          }
        ],
        [
          {
            text: 'üí∞ USD/Stablecoins',
            callback_data: 'quotes_stablecoins'
          },
          {
            text: '‚Çø Bitcoin',
            callback_data: 'quotes_btc'
          }
        ],
        [
          {
            text: 'üî∑ Ethereum',
            callback_data: 'quotes_eth'
          },
          {
            text: 'üü£ Solana',
            callback_data: 'quotes_sol'
          }
        ],
        [
          {
            text: 'üåç Euro',
            callback_data: 'quotes_eur'
          },
          {
            text: 'üîÑ Atualizar',
            callback_data: 'quotes_refresh'
          }
        ],
        [
          {
            text: 'üîô Voltar ao Menu',
            callback_data: 'quotes_back'
          }
        ]
      ]
    };

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  }

  private async showUserOperations(ctx: any): Promise<void> {
    try {
      // Buscar opera√ß√µes do usu√°rio
      const user = await this.usersService.findOrCreate({
        id: ctx.from.id,
        first_name: ctx.from.first_name,
        username: ctx.from.username,
      });

      const operations = await this.operationsService.getUserOperations(user._id);
      
      if (operations.length === 0) {
        await ctx.editMessageText(
          'üìã **Suas Opera√ß√µes**\n\n' +
          '‚ùå Voc√™ ainda n√£o possui opera√ß√µes ativas.\n\n' +
          'üí° **Dica:** Use o bot√£o "Criar Opera√ß√£o" para criar sua primeira opera√ß√£o P2P!',
          {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'ü§ù Criar Opera√ß√£o',
                    url: 'https://t.me/p2pscorebot?start=criar_operacao'
                  }
                ],
                [
                  {
                    text: 'üîô Voltar ao Menu',
                    callback_data: 'back_to_start_menu'
                  }
                ]
              ]
            }
          }
        );
        return;
      }

      let message = 'üìã **Suas Opera√ß√µes Ativas**\n\n';
      
      operations.slice(0, 5).forEach((op: any, index: number) => {
        const statusEmoji = op.status === 'pending' ? '‚è≥' : 
                           op.status === 'accepted' ? '‚úÖ' : 
                           op.status === 'completed' ? 'üéâ' : 
                           op.status === 'cancelled' ? '‚ùå' : '‚ùì';
        
        message += `${statusEmoji} **Opera√ß√£o ${index + 1}**\n`;
        message += `**Tipo:** ${op.type === 'sell' ? 'Vender' : 'Comprar'}\n`;
        message += `**Valor:** R$ ${op.amount}\n`;
        message += `**Status:** ${op.status}\n\n`;
      });

      if (operations.length > 5) {
        message += `... e mais ${operations.length - 5} opera√ß√µes\n\n`;
      }

      message += `**Total:** ${operations.length} opera√ß√µes`;

      // Criar bot√µes de navega√ß√£o se houver muitas opera√ß√µes
      const keyboard: { inline_keyboard: any[][] } = {
        inline_keyboard: []
      };

      // Se h√° mais de 5 opera√ß√µes, adicionar bot√µes de navega√ß√£o
      if (operations.length > 5) {
        keyboard.inline_keyboard.push([
          {
            text: '‚¨ÖÔ∏è Anterior',
            callback_data: 'my_ops_prev_0'
          },
          {
            text: `1 de ${Math.ceil(operations.length / 5)}`,
            callback_data: 'my_ops_page_info'
          },
          {
            text: '‚û°Ô∏è Pr√≥xima',
            callback_data: 'my_ops_next_0'
          }
        ]);
      }

      keyboard.inline_keyboard.push([
        {
          text: 'üîÑ Atualizar',
          callback_data: 'start_my_operations'
        },
        {
          text: 'üîô Voltar ao Menu',
          callback_data: 'back_to_start_menu'
        }
      ]);

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: keyboard
      });
    } catch (error) {
      this.logger.error('Erro ao mostrar opera√ß√µes do usu√°rio:', error);
      await ctx.editMessageText(
        '‚ùå **Erro ao carregar opera√ß√µes**\n\n' +
        'N√£o foi poss√≠vel carregar suas opera√ß√µes. Tente novamente.',
        { parse_mode: 'Markdown' }
      );
    }
  }

  private async showAvailableOperations(ctx: any): Promise<void> {
    try {
      // Buscar opera√ß√µes dispon√≠veis
      const operations = await this.operationsService.getPendingOperations();
      
      if (operations.length === 0) {
        await ctx.editMessageText(
          'üìä **Opera√ß√µes Dispon√≠veis**\n\n' +
          '‚ùå N√£o h√° opera√ß√µes dispon√≠veis no momento.\n\n' +
          'üí° **Dica:** Seja o primeiro a criar uma opera√ß√£o!',
          {
            parse_mode: 'Markdown',
            reply_markup: {
              inline_keyboard: [
                [
                  {
                    text: 'ü§ù Criar Opera√ß√£o',
                    url: 'https://t.me/p2pscorebot?start=criar_operacao'
                  }
                ],
                [
                  {
                    text: 'üîô Voltar ao Menu',
                    callback_data: 'back_to_start_menu'
                  }
                ]
              ]
            }
          }
        );
        return;
      }

      let message = 'üìä **Opera√ß√µes Dispon√≠veis**\n\n';
      
      operations.slice(0, 3).forEach((op: any, index: number) => {
        const typeEmoji = op.type === 'sell' ? 'üí∞' : 'üõí';
        
        message += `${typeEmoji} **Opera√ß√£o ${index + 1}**\n`;
        message += `**Tipo:** ${op.type === 'sell' ? 'Vender' : 'Comprar'}\n`;
        message += `**Valor:** R$ ${op.amount}\n`;
        message += `**Criador:** ${op.creator?.userName || op.creator?.firstName || 'Usu√°rio'}\n\n`;
      });

      if (operations.length > 3) {
        message += `... e mais ${operations.length - 3} opera√ß√µes dispon√≠veis\n\n`;
      }

      message += `**Total:** ${operations.length} opera√ß√µes ativas`;

      await ctx.editMessageText(message, {
        parse_mode: 'Markdown',
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: 'üîô Voltar ao Menu',
                callback_data: 'back_to_start_menu'
              }
            ]
          ]
        }
      });
    } catch (error) {
      this.logger.error('Erro ao mostrar opera√ß√µes dispon√≠veis:', error);
      await ctx.editMessageText(
        '‚ùå **Erro ao carregar opera√ß√µes**\n\n' +
        'N√£o foi poss√≠vel carregar as opera√ß√µes. Tente novamente.',
        { parse_mode: 'Markdown' }
      );
    }
  }

  private async showHelpMenu(ctx: any): Promise<void> {
    const message = (
      '‚ùì **Ajuda - TrustScore P2P Bot**\n\n' +
      '**Comandos Principais:**\n\n' +
      'ü§ù **Opera√ß√µes:**\n' +
      '‚Ä¢ `/criaroperacao` - Criar nova opera√ß√£o\n' +
      '‚Ä¢ `/operacoes` - Ver opera√ß√µes dispon√≠veis\n' +
      '‚Ä¢ `/minhasoperacoes` - Suas opera√ß√µes\n\n' +
      '‚≠ê **Reputa√ß√£o:**\n' +
      '‚Ä¢ `/reputacao` - Ver sua reputa√ß√£o\n' +
      '‚Ä¢ `/reputacao @usuario` - Ver reputa√ß√£o de algu√©m\n\n' +
      'üí± **Cota√ß√µes:**\n' +
      '‚Ä¢ `/cotacoes` - Ver cota√ß√µes atuais\n\n' +
      'üìã **Outros:**\n' +
      '‚Ä¢ `/termos` - Ver termos de responsabilidade\n' +
      '‚Ä¢ `/help` - Esta ajuda\n\n' +
      'üí° **Dica:** Use os bot√µes do menu para navega√ß√£o r√°pida!'
    );

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: {
        inline_keyboard: [
          [
            {
              text: 'üîô Voltar ao Menu',
              callback_data: 'back_to_start_menu'
            }
          ]
        ]
      }
    });
  }

  private async showStartMenu(ctx: any): Promise<void> {
    const message = (
      '**Bem-vindo ao P2P Score Bot!**\n\n' +
      '**Principais funcionalidades:**\n' +
      '‚Ä¢ Criar e gerenciar opera√ß√µes P2P\n' +
      '‚Ä¢ Ver reputa√ß√£o e hist√≥rico de usu√°rios\n' +
      '‚Ä¢ Avaliar transa√ß√µes e parceiros\n' +
      '‚Ä¢ Consultar cota√ß√µes atuais\n\n' +
      '**Use os bot√µes abaixo para navegar rapidamente:**'
    );

    const keyboard = {
      inline_keyboard: [
        [
          {
            text: 'ü§ù Criar Opera√ß√£o',
            url: 'https://t.me/p2pscorebot?start=criar_operacao'
          },
          {
            text: 'üìã Minhas Opera√ß√µes',
            callback_data: 'start_my_operations'
          }
        ],
        [
          {
            text: '‚≠ê Minha Reputa√ß√£o',
            callback_data: 'start_my_reputation'
          },
          {
            text: 'üí± Cota√ß√µes',
            callback_data: 'start_quotes'
          }
        ],
        [
          {
            text: 'üìä Ver Opera√ß√µes',
            callback_data: 'start_view_operations'
          },
          {
            text: '‚ùì Ajuda',
            callback_data: 'start_help'
          }
        ]
      ]
    };

    await ctx.editMessageText(message, {
      parse_mode: 'Markdown',
      reply_markup: keyboard
    });
  }


}