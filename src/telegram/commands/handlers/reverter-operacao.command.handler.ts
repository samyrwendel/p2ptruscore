import { Injectable, Logger } from '@nestjs/common';
import { Types } from 'mongoose';
import { createHash } from 'crypto';
import { OperationsService } from '../../../operations/operations.service';
import { UsersService } from '../../../users/users.service';
import { TelegramKeyboardService } from '../../shared/telegram-keyboard.service';
import {
  ITextCommandHandler,
  TextCommandContext,
} from 'src/telegram/telegram.types';

@Injectable()
export class ReverterOperacaoCommandHandler implements ITextCommandHandler {
  private readonly logger = new Logger(ReverterOperacaoCommandHandler.name);
  command = /^\/reverteroperacao(?:@\w+)?\s+([a-f0-9]{24})$/;

  constructor(
    private readonly operationsService: OperationsService,
    private readonly usersService: UsersService,
    private readonly keyboardService: TelegramKeyboardService,
  ) {}

  async handle(ctx: TextCommandContext): Promise<void> {
    const match = ctx.message.text.match(this.command);
    if (!match) {
      await ctx.reply(
        '‚ñº Formato incorreto. Use:\n' +
        '`/reverteroperacao [ID_DA_OPERACAO]`\n\n' +
        'Exemplo: `/reverteroperacao 507f1f77bcf86cd799439011`\n\n' +
        'Use `/minhasoperacoes` para ver o ID das suas opera√ß√µes.',
        { parse_mode: 'Markdown' }
      );
      return;
    }

    const [, operationId] = match;
    
    // Buscar usu√°rio pelo ID do Telegram
    if (!ctx.from?.id) {
      await ctx.reply('‚ñº Erro: ID do usu√°rio n√£o encontrado.');
      return;
    }

    const telegramUserId = ctx.from.id;
    const user = await this.usersService.findOneByUserId(telegramUserId);
    
    if (!user) {
      await ctx.reply('‚ñº Usu√°rio n√£o encontrado no sistema. Voc√™ precisa interagir com o bot primeiro.');
      return;
    }

    const userId = user._id;

    try {
      const operationObjectId = new Types.ObjectId(operationId);
      
      this.logger.log(
        `User ${userId} attempting to revert operation ${operationObjectId}`
      );
      
      const revertedOperation = await this.operationsService.revertOperation(
        operationObjectId,
        userId
      );

      const userName = ctx.from.first_name || ctx.from.username || 'Usu√°rio';
      
      await ctx.reply(
        `üîÑ **Opera√ß√£o Revertida com Sucesso!**\n\n` +
        `‚úÖ A opera√ß√£o \`${operationId}\` foi revertida por ${userName}.\n\n` +
        `üìã **Status:** A opera√ß√£o voltou ao status **PENDENTE** e est√° novamente dispon√≠vel para aceita√ß√£o.\n\n` +
        `üîç **Pr√≥ximos passos:**\n` +
        `‚Ä¢ A opera√ß√£o aparecer√° novamente nos grupos\n` +
        `‚Ä¢ Outros usu√°rios podem aceitar a opera√ß√£o\n` +
        `‚Ä¢ Use \`/minhasoperacoes\` para acompanhar`,
        { parse_mode: 'Markdown' }
      );

      this.logger.log(
        `Operation ${operationObjectId} successfully reverted by user ${userId}`
      );
    } catch (error) {
      this.logger.error(
        `Error reverting operation ${operationId} by user ${userId}:`,
        error
      );
      
      let errorMessage = '‚ñº Erro ao reverter opera√ß√£o.';
      
      if (error.message.includes('n√£o encontrada')) {
        errorMessage = '‚ñº Opera√ß√£o n√£o encontrada. Verifique o ID e tente novamente.';
      } else if (error.message.includes('s√≥ pode reverter')) {
        errorMessage = '‚ñº Voc√™ s√≥ pode reverter opera√ß√µes que criou ou aceitou.';
      } else if (error.message.includes('Apenas opera√ß√µes aceitas')) {
        errorMessage = '‚ñº Apenas opera√ß√µes aceitas podem ser revertidas.';
      }
      
      await ctx.reply(errorMessage);
    }
  }

  async handleCallback(ctx: any): Promise<boolean> {
    const data = ctx.callbackQuery?.data;
    
    if (!data || !data.startsWith('revert_operation_')) {
      return false;
    }

    try {
      // Tentar responder ao callback, mas ignorar se expirado
      try {
        await ctx.answerCbQuery();
      } catch (cbError: any) {
        if (cbError.description?.includes('query is too old') || cbError.description?.includes('query ID is invalid')) {
          this.logger.warn('Callback query expirado no reverter opera√ß√£o:', cbError.description);
        } else {
          throw cbError;
        }
      }

      const operationId = data.replace('revert_operation_', '');
      
      // Buscar o usu√°rio no banco de dados
      const userData = {
        id: ctx.from.id,
        username: ctx.from.username,
        first_name: ctx.from.first_name,
        last_name: ctx.from.last_name
      };
      
      let user;
      try {
        user = await this.usersService.findOrCreate(userData);
        this.logger.log(`Usu√°rio encontrado para revers√£o via callback: ${user._id}`);
      } catch (error) {
        this.logger.error(`Erro ao buscar usu√°rio:`, error);
        await ctx.editMessageText('‚ùå Erro interno ao processar usu√°rio.');
        return true;
      }
      
      const userId = user._id;

      try {
        const revertedOperation = await this.operationsService.revertOperation(
          new Types.ObjectId(operationId),
          userId,
        );

        // N√£o editar a mensagem aqui - o notifyOperationReverted j√° cuida disso
        // A mensagem ser√° automaticamente atualizada pelo broadcast service
        // para mostrar a opera√ß√£o dispon√≠vel novamente

        this.logger.log(
          `Operation ${operationId} reverted via callback by user ${userId}`,
        );
        
      } catch (error) {
         this.logger.error('Error reverting operation via callback:', error);
         
         // Para erros de permiss√£o, apenas mostrar popup sem alterar a mensagem
         let errorMessage = '‚ùå Erro ao reverter opera√ß√£o. Tente novamente.';
         if (error instanceof Error) {
           if (error.message.includes('s√≥ pode reverter')) {
             errorMessage = '‚ùå Voc√™ s√≥ pode reverter opera√ß√µes que criou ou aceitou.';
           } else if (error.message.includes('Apenas opera√ß√µes aceitas')) {
             errorMessage = '‚ùå Apenas opera√ß√µes aceitas podem ser revertidas.';
           } else {
             errorMessage = `‚ùå ${error.message}`;
           }
         }
         
         // Mostrar apenas popup de erro, sem alterar a mensagem da opera√ß√£o
         try {
           await ctx.answerCbQuery(errorMessage, { show_alert: true });
         } catch (cbError: any) {
           if (cbError.description?.includes('query is too old') || cbError.description?.includes('query ID is invalid')) {
             this.logger.warn('Callback query expirado ao mostrar erro:', cbError.description);
           } else {
             this.logger.error('Erro ao mostrar popup de erro:', cbError);
           }
         }
       }
      
      return true;
    } catch (error) {
      this.logger.error('Error in revert operation callback:', error);
      return true;
    }
  }
}