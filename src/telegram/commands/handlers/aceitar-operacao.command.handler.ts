import { Injectable, Logger } from '@nestjs/common';
import { Types } from 'mongoose';
import { OperationsService } from '../../../operations/operations.service';
import { TelegramKeyboardService } from '../../shared/telegram-keyboard.service';
import { UsersService } from '../../../users/users.service';
import { TermsAcceptanceService } from '../../../users/terms-acceptance.service';
import { KarmaService } from '../../../karma/karma.service';
import { getReputationInfo } from '../../../shared/reputation.utils';
import { validateUserTermsForOperation } from '../../../shared/terms-validation.utils';
import {
  ITextCommandHandler,
  TextCommandContext,
} from 'src/telegram/telegram.types';

@Injectable()
export class AceitarOperacaoCommandHandler implements ITextCommandHandler {
  private readonly logger = new Logger(AceitarOperacaoCommandHandler.name);
  command = /^\/aceitaroperacao(?:@\w+)?\s+([a-f0-9]{24})$/;

  constructor(
    private readonly operationsService: OperationsService,
    private readonly keyboardService: TelegramKeyboardService,
    private readonly usersService: UsersService,
    private readonly termsAcceptanceService: TermsAcceptanceService,
    private readonly karmaService: KarmaService,
  ) {}

  private async getKarmaForUserWithFallback(user: any, chatId: number): Promise<any> {
    try {
      // Primeiro tentar buscar karma no grupo atual
      const groupKarma = await this.karmaService.getKarmaForUser(user.userId, chatId);
      
      if (groupKarma && groupKarma.karma !== undefined) {
        return groupKarma;
      }
      
      // Se n√£o encontrar no grupo atual, buscar karma total
      const totalKarma = await this.karmaService.getTotalKarmaForUser(user.userName || user.firstName);
      
      if (totalKarma) {
        // Simular estrutura de karma do grupo para compatibilidade
        return {
          karma: totalKarma.totalKarma,
          givenKarma: totalKarma.totalGiven,
          givenHate: totalKarma.totalHate,
          user: totalKarma.user,
          history: [] // Hist√≥rico vazio para karma total
        };
      }
      
      return null;
    } catch (error) {
      this.logger.error('Erro ao buscar karma com fallback:', error);
      return null;
    }
  }

  async handle(ctx: TextCommandContext): Promise<void> {
    if (ctx.chat.type === 'private') {
      await ctx.reply(
        '‚ñº Este comando s√≥ pode ser usado em grupos onde o bot est√° ativo.',
      );
      return;
    }

    // A valida√ß√£o de termos √© feita globalmente no TelegramService
    // N√£o precisa validar aqui novamente

    const match = ctx.message.text.match(this.command);
    if (!match) {
      await ctx.reply(
        '‚ñº Formato incorreto. Use:\n' +
        '`/aceitaroperacao [ID_DA_OPERACAO]`\n\n' +
        'Exemplo: `/aceitaroperacao 507f1f77bcf86cd799439011`',
        { parse_mode: 'Markdown' }
      );
      return;
    }

    const [, operationId] = match;
    
    // Validar se ctx.from e ctx.from.id existem
    if (!ctx.from || !ctx.from.id) {
      this.logger.error('ctx.from ou ctx.from.id n√£o definido');
      await ctx.reply('‚ùå Erro interno: informa√ß√µes do usu√°rio n√£o dispon√≠veis.');
      return;
    }

    // Garantir que o usu√°rio aceitador existe no banco de dados
    const acceptorUserData = {
      id: ctx.from.id,
      username: ctx.from.username,
      first_name: ctx.from.first_name || 'Usu√°rio',
      last_name: ctx.from.last_name
    };
    const acceptorUser = await this.usersService.findOrCreate(acceptorUserData);
    const acceptorId = acceptorUser._id;

    try {
      // Verificar se a opera√ß√£o existe e est√° dispon√≠vel
      const operation = await this.operationsService.getOperationById(
        new Types.ObjectId(operationId),
      );

      // Valida√ß√£o de grupo removida - permitir aceitar opera√ß√µes de qualquer grupo

      // Verificar se o usu√°rio n√£o est√° tentando aceitar sua pr√≥pria opera√ß√£o
      if (operation.creator.toString() === acceptorId.toString()) {
        await ctx.reply('‚ñº Voc√™ n√£o pode aceitar sua pr√≥pria opera√ß√£o.');
        return;
      }

      // Aceitar a opera√ß√£o
      const acceptedOperation = await this.operationsService.acceptOperation(
        new Types.ObjectId(operationId),
        acceptorId,
      );

      // Buscar informa√ß√µes do usu√°rio criador (acceptorUser j√° foi obtido acima)
      const creatorUser = await this.usersService.findById(acceptedOperation.creator.toString());

      // Buscar reputa√ß√£o de ambos (usar karma total se n√£o encontrar no grupo atual)
      const [creatorKarma, acceptorKarma] = await Promise.all([
        creatorUser?.userId ? this.getKarmaForUserWithFallback(creatorUser, ctx.chat.id) : null,
        acceptorUser?.userId ? this.getKarmaForUserWithFallback(acceptorUser, ctx.chat.id) : null,
      ]);

      const creatorName = creatorUser?.userName ? `@${creatorUser.userName}` : creatorUser?.firstName || 'Usu√°rio';
      const acceptorName = acceptorUser?.userName ? `@${acceptorUser.userName}` : acceptorUser?.firstName || 'Usu√°rio';
      const creatorReputation = creatorKarma?.karma || 0;
      const acceptorReputation = acceptorKarma?.karma || 0;
      const typeText = acceptedOperation.type === 'buy' ? 'COMPRA' : 'VENDA';
      
      const creatorIcons = getReputationInfo(creatorReputation);
      const acceptorIcons = getReputationInfo(acceptorReputation);
      
      // Determinar ordem de transfer√™ncia (menor reputa√ß√£o transfere primeiro)
      const creatorTransfersFirst = creatorReputation <= acceptorReputation;
      const firstTransferer = creatorTransfersFirst ? 
        { name: creatorName, reputation: creatorReputation, icons: { nivel: creatorIcons.nivel, icone: creatorIcons.icone }, role: 'Criador' } :
        { name: acceptorName, reputation: acceptorReputation, icons: { nivel: acceptorIcons.nivel, icone: acceptorIcons.icone }, role: 'Negociador' };
      const secondTransferer = creatorTransfersFirst ? 
        { name: acceptorName, reputation: acceptorReputation, icons: { nivel: acceptorIcons.nivel, icone: acceptorIcons.icone }, role: 'Negociador' } :
        { name: creatorName, reputation: creatorReputation, icons: { nivel: creatorIcons.nivel, icone: creatorIcons.icone }, role: 'Criador' };
      
      // Formatar quantidade conforme tipo de ativo
      const formattedAmount = this.formatValueByAsset(acceptedOperation.amount, acceptedOperation.assets);
      const currencySuffix = this.getCurrencySuffix(acceptedOperation.assets);
      
      // Verificar tipo de cota√ß√£o para exibir informa√ß√µes corretas
      const isGoogleQuotation = acceptedOperation.quotationType === 'google';
      const priceText = isGoogleQuotation ? 'Calculado na Transa√ß√£o' : `R$ ${(acceptedOperation.amount * acceptedOperation.price).toFixed(2)}`;
      const quotationText = isGoogleQuotation ? 'Google' : `R$ ${acceptedOperation.price.toFixed(2)}`;
      
      // N√£o enviar mensagem aqui - deixar que o broadcast service gerencie
      // A mensagem ser√° enviada via notifyOperationAccepted no operations.service.ts

      this.logger.log(
        `Operation ${operationId} accepted by user ${acceptorId} in group ${ctx.chat.id}`,
      );
      
    } catch (error) {
      this.logger.error('Error accepting operation:', error);
      
      if (error instanceof Error) {
        await ctx.reply(`‚ñº ${error.message}`);
      } else {
        await ctx.reply('‚ñº Erro ao aceitar opera√ß√£o. Tente novamente.');
      }
    }
  }

  private formatValueByAsset(value: number, assets: string[]): string {
    if (!assets || assets.length === 0) {
      return value.toFixed(2);
    }

    // Verificar se tem BTC ou ETH (8 casas decimais)
    const hasCrypto = assets.some(asset => ['BTC', 'ETH'].includes(asset));
    if (hasCrypto) {
      return value.toFixed(8);
    }

    // Verificar se tem stablecoins ou moedas fiat (2 casas decimais)
    const hasStablecoinOrFiat = assets.some(asset => 
      ['USDT', 'USDC', 'USDE', 'DOLAR', 'EURO', 'REAL'].includes(asset)
    );
    if (hasStablecoinOrFiat) {
      return value.toFixed(2);
    }

    // Outros casos (XRP, etc.) - 2 casas decimais por padr√£o
    return value.toFixed(2);
  }

  // Fun√ß√£o para obter sufixo da moeda baseado nos ativos
  private getCurrencySuffix(assets: string[]): string {
    if (!assets || assets.length === 0) {
      return '';
    }

    // Verificar se tem stablecoins
    const hasStablecoin = assets.some(asset => ['USDT', 'USDC', 'USDE'].includes(asset));
    if (hasStablecoin) {
      return ' USD';
    }

    // Verificar se tem moedas fiat
    if (assets.includes('REAL')) {
      return ' BRL';
    }
    if (assets.includes('DOLAR')) {
      return ' USD';
    }
    if (assets.includes('EURO')) {
      return ' EUR';
    }

    // Verificar se tem BTC ou ETH
    if (assets.includes('BTC')) {
      return ' BTC';
    }
    if (assets.includes('ETH')) {
      return ' ETH';
    }

    // Outros casos
    return '';
  }

  async handleCallback(ctx: any): Promise<boolean> {
    const data = ctx.callbackQuery.data;
    
    // Verificar se este callback pertence a este handler
    if (!data.startsWith('accept_operation_')) {
      return false;
    }
    
    try {
      // A valida√ß√£o de termos √© feita globalmente no TelegramService
      // N√£o precisa validar aqui novamente

      // Extrair o ID da opera√ß√£o do callback
      const operationId = data.replace('accept_operation_', '');
      
      this.logger.log(`üìû Processando aceitar opera√ß√£o: ${operationId}`);
      this.logger.log(`üìû ID length: ${operationId.length}, ID: ${operationId}`);
      
      // Validar se √© um ObjectId v√°lido
      if (!Types.ObjectId.isValid(operationId)) {
        this.logger.error(`‚ùå ID de opera√ß√£o inv√°lido: ${operationId}`);
        try {
          await ctx.answerCbQuery('‚ùå ID de opera√ß√£o inv√°lido', { show_alert: true });
        } catch (cbError: any) {
          if (cbError.description?.includes('query is too old') || cbError.description?.includes('query ID is invalid')) {
            this.logger.warn('Callback query expirado - ID inv√°lido:', cbError.description);
          } else {
            this.logger.error('Erro ao responder callback - ID inv√°lido:', cbError);
          }
        }
        return true;
      }
      
      // Buscar a opera√ß√£o
      const operation = await this.operationsService.getOperationById(new Types.ObjectId(operationId));
      if (!operation) {
        try {
          await ctx.answerCbQuery('‚ùå Opera√ß√£o n√£o encontrada', { show_alert: true });
        } catch (cbError: any) {
          if (cbError.description?.includes('query is too old') || cbError.description?.includes('query ID is invalid')) {
            this.logger.warn('Callback query expirado - opera√ß√£o n√£o encontrada:', cbError.description);
          } else {
            this.logger.error('Erro ao responder callback - opera√ß√£o n√£o encontrada:', cbError);
          }
        }
        return true;
      }
      
      // Verificar se a opera√ß√£o ainda est√° dispon√≠vel
      if (operation.status !== 'pending') {
        try {
          await ctx.answerCbQuery('‚ùå Esta opera√ß√£o n√£o est√° mais dispon√≠vel', { show_alert: true });
        } catch (cbError: any) {
          if (cbError.description?.includes('query is too old') || cbError.description?.includes('query ID is invalid')) {
            this.logger.warn('Callback query expirado - opera√ß√£o indispon√≠vel:', cbError.description);
          } else {
            this.logger.error('Erro ao responder callback - opera√ß√£o indispon√≠vel:', cbError);
          }
        }
        return true;
      }
      
      // Verificar se n√£o √© o pr√≥prio criador tentando aceitar
      if (operation.creator.toString() === ctx.from.id.toString()) {
        try {
          await ctx.answerCbQuery('‚ùå Voc√™ n√£o pode aceitar sua pr√≥pria opera√ß√£o', { show_alert: true });
        } catch (cbError: any) {
          if (cbError.description?.includes('query is too old') || cbError.description?.includes('query ID is invalid')) {
            this.logger.warn('Callback query expirado - pr√≥pria opera√ß√£o:', cbError.description);
          } else {
            this.logger.error('Erro ao responder callback - pr√≥pria opera√ß√£o:', cbError);
          }
        }
        return true;
      }
      
      // Buscar ou criar usu√°rio aceitador
      const acceptorUser = await this.usersService.findOrCreate({
        id: ctx.from.id,
        username: ctx.from.username,
        first_name: ctx.from.first_name,
        last_name: ctx.from.last_name
      });
      
      // Processar a aceita√ß√£o da opera√ß√£o
      await this.operationsService.acceptOperation(new Types.ObjectId(operationId), acceptorUser._id);
      
      try {
        await ctx.answerCbQuery('‚úÖ Opera√ß√£o aceita com sucesso!', { show_alert: true });
      } catch (cbError: any) {
        if (cbError.description?.includes('query is too old') || cbError.description?.includes('query ID is invalid')) {
          this.logger.warn('Callback query expirado - sucesso:', cbError.description);
        } else {
          this.logger.error('Erro ao responder callback - sucesso:', cbError);
        }
      }
      
      this.logger.log(`‚úÖ Opera√ß√£o ${operationId} aceita por ${acceptorUser._id}`);
      
      return true;
      
    } catch (error) {
      this.logger.error('‚ùå Erro ao processar callback de aceitar opera√ß√£o:', error);
      
      let errorMessage = '‚ùå Erro ao aceitar opera√ß√£o';
      if (error instanceof Error) {
        errorMessage = `‚ùå ${error.message}`;
      }
      
      try {
        await ctx.answerCbQuery(errorMessage, { show_alert: true });
      } catch (cbError: any) {
        if (cbError.description?.includes('query is too old') || cbError.description?.includes('query ID is invalid')) {
          this.logger.warn('Callback query expirado no tratamento de erro:', cbError.description);
        } else {
          this.logger.error('Erro ao responder callback de erro:', cbError);
        }
      }
      
      return false;
    }
  }
}