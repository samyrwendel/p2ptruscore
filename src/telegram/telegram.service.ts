import {
  Injectable,
  Logger,
  OnModuleInit,
  OnApplicationShutdown,
} from '@nestjs/common';
import { ConfigService } from '@nestjs/config';
import { Telegraf, Context } from 'telegraf';
import { message } from 'telegraf/filters';
import { Update } from 'telegraf/types';
import { InjectBot } from 'nestjs-telegraf';
import { ICommandHandler } from './commands/command.interface';
import { MeCommandHandler } from './commands/handlers/me.command.handler';
import { TopCommandHandler } from './commands/handlers/top.command.handler';
import { HateCommandHandler } from './commands/handlers/hate.command.handler';
import { MostGiversCommandHandler } from './commands/handlers/mostgivers.command.handler';
import { HelpCommandHandler } from './commands/handlers/help.command.handler';
import { GetKarmaCommandHandler } from './commands/handlers/getkarma.command.handler';
import { SendCommandHandler } from './commands/handlers/send.command.handler';
import { HistoryCommandHandler } from './commands/handlers/history.command.handler';
import { GetHistoryCommandHandler } from './commands/handlers/gethistory.command.handler';
import { TopReceivedCommandHandler } from './commands/handlers/top-received.command.handler';
import { AvaliarCommandHandler } from './commands/handlers/avaliar.command.handler';
import { ReputacaoCommandHandler } from './commands/handlers/reputacao.command.handler';
import { ConfiancaCommandHandler } from './commands/handlers/confianca.command.handler';
import { CriarOperacaoCommandHandler } from './commands/handlers/criar-operacao.command.handler';
import { AceitarOperacaoCommandHandler } from './commands/handlers/aceitar-operacao.command.handler';
import { MinhasOperacoesCommandHandler } from './commands/handlers/minhas-operacoes.command.handler';
import { CancelarOperacaoCommandHandler } from './commands/handlers/cancelar-operacao.command.handler';
import { CancelarOrdemCommandHandler } from './commands/handlers/cancelar-ordem.command.handler';
import { ReverterOperacaoCommandHandler } from './commands/handlers/reverter-operacao.command.handler';
import { ConcluirOperacaoCommandHandler } from './commands/handlers/concluir-operacao.command.handler';
import { OperacoesDisponiveisCommandHandler } from './commands/handlers/operacoes-disponiveis.command.handler';
import { HelloCommandHandler } from './commands/handlers/hello.command.handler';
import { ApagarOperacoesPendentesCommandHandler } from './commands/handlers/apagar-operacoes-pendentes.command.handler';
import { FecharOperacaoCommandHandler } from './commands/handlers/fechar-operacao.command.handler';
import { StartCommandHandler } from './commands/handlers/start.command.handler';
import { CotacoesCommandHandler } from './commands/handlers/cotacoes.command.handler';
import { TermosCommandHandler } from './commands/handlers/termos.command.handler';
import { KarmaMessageHandler } from './handlers/karma-message.handler';
import { NewMemberHandler } from './handlers/new-member.handler';
import { TermsAcceptanceService } from '../users/terms-acceptance.service';
import { isTextCommandHandler, TextCommandContext } from './telegram.types';

@Injectable()
export class TelegramService implements OnModuleInit, OnApplicationShutdown {
  private readonly logger = new Logger(TelegramService.name);

  private readonly commandHandlers = new Map<
    string | RegExp,
    ICommandHandler<any>
  >();

  constructor(
    @InjectBot() private readonly bot: Telegraf<Context<Update>>,
    private readonly configService: ConfigService,
    private readonly karmaMessageHandler: KarmaMessageHandler,
    private readonly meHandler: MeCommandHandler,
    private readonly topHandler: TopCommandHandler,
    private readonly hateHandler: HateCommandHandler,
    private readonly mostGiversHandler: MostGiversCommandHandler,
    private readonly helpHandler: HelpCommandHandler,
    private readonly getKarmaHandler: GetKarmaCommandHandler,
    private readonly sendHandler: SendCommandHandler,
    private readonly historyHandler: HistoryCommandHandler,
    private readonly getHistoryHandler: GetHistoryCommandHandler,
    private readonly topReceivedHandler: TopReceivedCommandHandler,
    private readonly avaliarHandler: AvaliarCommandHandler,
    private readonly reputacaoHandler: ReputacaoCommandHandler,
    private readonly confiancaHandler: ConfiancaCommandHandler,
    private readonly criarOperacaoHandler: CriarOperacaoCommandHandler,
    private readonly aceitarOperacaoHandler: AceitarOperacaoCommandHandler,
    private readonly minhasOperacoesHandler: MinhasOperacoesCommandHandler,
    private readonly cancelarOperacaoHandler: CancelarOperacaoCommandHandler,
    private readonly cancelarOrdemHandler: CancelarOrdemCommandHandler,
    private readonly reverterOperacaoHandler: ReverterOperacaoCommandHandler,
    private readonly concluirOperacaoHandler: ConcluirOperacaoCommandHandler,
    private readonly operacoesDisponiveisHandler: OperacoesDisponiveisCommandHandler,
    private readonly helloHandler: HelloCommandHandler,
    private readonly apagarOperacoesPendentesHandler: ApagarOperacoesPendentesCommandHandler,
    private readonly fecharOperacaoHandler: FecharOperacaoCommandHandler,
    private readonly startHandler: StartCommandHandler,
    private readonly cotacoesHandler: CotacoesCommandHandler,
    private readonly termosHandler: TermosCommandHandler,
    private readonly newMemberHandler: NewMemberHandler,
    private readonly termsAcceptanceService: TermsAcceptanceService,
  ) {
    // Registrar todos os command handlers
    this.registerCommand(meHandler);
    this.registerCommand(topHandler);
    this.registerCommand(hateHandler);
    this.registerCommand(mostGiversHandler);
    this.registerCommand(helpHandler);
    this.registerCommand(getKarmaHandler);
    this.registerCommand(sendHandler);
    this.registerCommand(historyHandler);
    this.registerCommand(getHistoryHandler);
    this.registerCommand(topReceivedHandler);
    this.registerCommand(avaliarHandler);
    this.registerCommand(reputacaoHandler);
    this.registerCommand(confiancaHandler);
    this.registerCommand(criarOperacaoHandler);
    this.registerCommand(aceitarOperacaoHandler);
    this.registerCommand(minhasOperacoesHandler);
    this.registerCommand(cancelarOperacaoHandler);
    this.registerCommand(cancelarOrdemHandler);
    this.registerCommand(reverterOperacaoHandler);
    this.registerCommand(concluirOperacaoHandler);
    this.registerCommand(operacoesDisponiveisHandler);
    this.registerCommand(helloHandler);
    this.registerCommand(apagarOperacoesPendentesHandler);
    this.registerCommand(fecharOperacaoHandler);
    this.registerCommand(startHandler);
    this.registerCommand(cotacoesHandler);
    this.registerCommand(termosHandler);
  }

  async onModuleInit() {
    this.registerListeners();
    this.logger.log('‚úÖ Telegram Bot initialized successfully via NestJS injection.');
  }

  private registerListeners() {
    this.bot.on(message('text'), async (ctx) => {
      try {
        await this.handleTextInput(ctx);
      } catch (error) {
        this.logger.error('Error handling text input:', error);
      }
    });

    this.bot.on('callback_query', async (ctx) => {
      try {
        await this.handleCallbackQuery(ctx);
      } catch (error) {
        this.logger.error('Error handling callback query:', error);
      }
    });

    // Listener para novos membros
    this.bot.on('new_chat_members', async (ctx) => {
      try {
        await this.newMemberHandler.handleNewChatMembers(ctx);
      } catch (error) {
        this.logger.error('Error handling new chat members:', error);
      }
    });
  }

  private async handleCommand(ctx: TextCommandContext) {
    for (const handler of this.commandHandlers.values()) {
      const command = this.getCommandHandler(handler);

      if (ctx.message.text.match(command) && isTextCommandHandler(handler)) {
        await handler.handle(ctx);
        return;
      }
    }
  }

  private async handleTextInput(ctx: TextCommandContext) {
    try {
      this.logger.log(`üìù Entrada de texto recebida: ${ctx.message.text}`);

      const text = ctx.message.text;

      // Primeiro, verificar se √© um comando
      if (text.startsWith('/')) {
        await this.processCommand(ctx);
        return;
      }

      // Se n√£o √© comando, procurar handler que tem sess√£o ativa e pode processar entrada de texto
      for (const handler of this.commandHandlers.values()) {
        if (handler && typeof handler.handleTextInput === 'function') {
          const sessionKey = `${ctx.from.id}_${ctx.chat.id}`;
          
          // Verificar se o handler tem uma sess√£o ativa
          if (typeof handler.hasActiveSession === 'function' && handler.hasActiveSession(sessionKey)) {
            await handler.handleTextInput(ctx);
            return;
          }
        }
      }

      // Se nenhum handler processou a entrada de texto, n√£o fazer nada
      // (pode ser uma mensagem normal no chat)
    } catch (error) {
      this.logger.error('‚ùå Erro ao processar entrada de texto:', error);
    }
  }

  private async processCommand(ctx: TextCommandContext) {
    try {
      const text = ctx.message.text;
      this.logger.log(`üéØ Processando comando: ${text}`);

      // VALIDA√á√ÉO GLOBAL: Verificar se usu√°rio aceitou termos (exceto comandos permitidos)
      if (await this.shouldValidateTerms(ctx, text)) {
        const hasAccepted = await this.validateUserTermsGlobally(ctx);
        if (!hasAccepted) {
          return; // Bloquear execu√ß√£o do comando
        }
      }

      // Procurar handler que corresponde ao comando
      for (const [commandPattern, handler] of this.commandHandlers.entries()) {
        if (this.matchesCommand(text, commandPattern)) {
          this.logger.log(`‚úÖ Comando ${text} correspondeu ao padr√£o: ${commandPattern}`);
          await handler.handle(ctx);
          return;
        }
      }

      this.logger.log(`‚ùì Nenhum handler encontrado para comando: ${text}`);
    } catch (error) {
      this.logger.error('‚ùå Erro ao processar comando:', error);
    }
  }

  private async shouldValidateTerms(ctx: TextCommandContext, text: string): Promise<boolean> {
    // Comandos que N√ÉO precisam de valida√ß√£o de termos (podem ser usados sem aceitar)
    const allowedCommands = [
      '/termos',
      '/terms',
      '/start', // Permitir /start para mostrar informa√ß√µes
      '/help',
      '/comandos'
    ];

    // Verificar se √© um comando permitido
    const isAllowedCommand = allowedCommands.some(cmd => 
      text.toLowerCase().startsWith(cmd.toLowerCase())
    );

    // S√≥ validar termos se n√£o for comando permitido E se for em grupo
    return !isAllowedCommand && ctx.chat.type !== 'private';
  }

  private async validateUserTermsGlobally(ctx: TextCommandContext): Promise<boolean> {
    try {
      const hasAccepted = await this.termsAcceptanceService.hasUserAcceptedCurrentTerms(
        ctx.from.id,
        ctx.chat.id
      );

      if (!hasAccepted) {
        // Verificar se √© um usu√°rio existente (tem karma/hist√≥rico no sistema)
        const isLegacyUser = await this.isLegacyUser(ctx.from.id);
        
        if (isLegacyUser) {
          // Para usu√°rios existentes, apresentar termos de forma amig√°vel
          await this.presentTermsToLegacyUser(ctx);
        } else {
          // Para usu√°rios novos, mensagem mais restritiva
          await ctx.reply(
            `üö´ **Acesso Restrito**\n\n` +
            `‚ùå Voc√™ precisa aceitar os termos de responsabilidade antes de usar comandos no grupo.\n\n` +
            `üìã **Como aceitar:**\n` +
            `1Ô∏è‚É£ Use o comando \`/termos\` para ler os termos\n` +
            `2Ô∏è‚É£ Clique em "‚úÖ ACEITO OS TERMOS"\n` +
            `3Ô∏è‚É£ Ap√≥s aceitar, voc√™ poder√° usar todos os comandos\n\n` +
            `‚ö†Ô∏è **Importante:** Esta valida√ß√£o garante que todos os membros conhecem as regras da comunidade.`,
            { parse_mode: 'Markdown' }
          );
        }
        
        this.logger.log(`üö´ Comando bloqueado para usu√°rio ${ctx.from.id} - termos n√£o aceitos`);
        return false;
      }

      return true;
    } catch (error) {
      this.logger.error(`Erro na valida√ß√£o global de termos para usu√°rio ${ctx.from.id}:`, error);
      return false;
    }
  }

  private async isLegacyUser(userId: number): Promise<boolean> {
    try {
      // Verificar se usu√°rio tem hist√≥rico no sistema
      // Se tem karma, opera√ß√µes ou avalia√ß√µes, √© considerado usu√°rio existente
      
      // Por enquanto, implementa√ß√£o simples: se o sistema de termos foi implementado recentemente,
      // considerar todos os usu√°rios atuais como legacy
      // Em produ√ß√£o real, isso checaria: karma > 0, opera√ß√µes criadas, etc.
      
      // Data de implementa√ß√£o do sistema de termos (22/09/2025)
      const termsImplementationDate = new Date('2025-09-22T00:00:00Z');
      const now = new Date();
      
      // Se o sistema est√° rodando h√° menos de 24 horas, considerar usu√°rios como legacy
      // Isso d√° tempo para todos os membros existentes aceitarem os termos
      const hoursSinceImplementation = (now.getTime() - termsImplementationDate.getTime()) / (1000 * 60 * 60);
      
      if (hoursSinceImplementation < 24) {
        return true; // Per√≠odo de gra√ßa para usu√°rios existentes
      }
      
      // Ap√≥s 24h, apenas novos usu√°rios precisar√£o aceitar automaticamente
      return false;
      
    } catch (error) {
      this.logger.error('Erro ao verificar se usu√°rio √© legacy:', error);
      return false;
    }
  }

  private async presentTermsToLegacyUser(ctx: TextCommandContext): Promise<void> {
    const userName = ctx.from.username ? `@${ctx.from.username}` : ctx.from.first_name;
    
    await ctx.reply(
      `üëã **Ol√° ${userName}!**\n\n` +
      `üîÑ **Atualiza√ß√£o do Sistema:** Implementamos novos termos de responsabilidade para maior seguran√ßa da comunidade.\n\n` +
      `üìã **Como membro existente, voc√™ precisa aceitar os novos termos para continuar usando o bot.**\n\n` +
      `‚úÖ **√â r√°pido e simples:**\n` +
      `1Ô∏è‚É£ Use \`/termos\` para ler os termos atualizados\n` +
      `2Ô∏è‚É£ Clique em "‚úÖ ACEITO OS TERMOS"\n` +
      `3Ô∏è‚É£ Continue usando o bot normalmente\n\n` +
      `üí° **Tranquilo:** Voc√™ n√£o ser√° removido do grupo, apenas precisa aceitar os termos para usar comandos.`,
      { parse_mode: 'Markdown' }
    );
  }

  private async handleCallbackQuery(ctx: any) {
    try {
      // VALIDA√á√ÉO GLOBAL: Verificar se usu√°rio aceitou termos para callbacks (exceto callbacks de termos)
      if (await this.shouldValidateTermsForCallback(ctx)) {
        const hasAccepted = await this.validateUserTermsForCallback(ctx);
        if (!hasAccepted) {
          return; // Bloquear execu√ß√£o do callback
        }
      }

      // Tentar processar com cada handler que suporta callbacks
      const handlers = [
        this.avaliarHandler,
        this.criarOperacaoHandler,
        this.aceitarOperacaoHandler,
        this.minhasOperacoesHandler,
        this.cancelarOperacaoHandler,
        this.cancelarOrdemHandler,
        this.reverterOperacaoHandler,
        this.concluirOperacaoHandler,
        this.operacoesDisponiveisHandler,
        this.apagarOperacoesPendentesHandler,
        this.fecharOperacaoHandler,
        this.startHandler,
        this.termosHandler,
        this.newMemberHandler,
      ];

      for (const handler of handlers) {
        if ('handleCallback' in handler && typeof handler.handleCallback === 'function') {
          const handled = await handler.handleCallback(ctx);
          if (handled) {
            this.logger.log(`üìû Callback ${ctx.callbackQuery?.data} processado por: ${handler.constructor.name}`);
            return;
          }
        }
      }

      this.logger.warn(`‚ö†Ô∏è Callback n√£o processado: ${ctx.callbackQuery?.data}`);
    } catch (error) {
      this.logger.error('Erro ao processar callback query:', error);
    }
  }

  private registerCommand(handler: ICommandHandler<any>) {
    this.commandHandlers.set(handler.command, handler);
    this.logger.log(`Command registered: ${handler.command}`);
  }

  private matchesCommand(text: string, pattern: string | RegExp): boolean {
    if (typeof pattern === 'string') {
      return text.toLowerCase().includes(pattern.toLowerCase());
    } else {
      return pattern.test(text);
    }
  }

  private getCommandHandler(handler: ICommandHandler<any>) {
    return typeof handler.command === 'string'
      ? `/${handler.command}`
      : handler.command;
  }

  private async shouldValidateTermsForCallback(ctx: any): Promise<boolean> {
    const data = ctx.callbackQuery?.data;
    if (!data) return false;

    // Callbacks que N√ÉO precisam de valida√ß√£o (relacionados aos pr√≥prios termos e funcionalidades b√°sicas)
    const allowedCallbacks = [
      'accept_terms_',
      'reject_terms_',
      'resend_terms_',
      'view_terms_detail_',
      'quotes_', // Cota√ß√µes s√£o informa√ß√µes p√∫blicas
      'start_' // Callbacks do comando /start
    ];

    // Verificar se √© um callback permitido
    const isAllowedCallback = allowedCallbacks.some(prefix => 
      data.startsWith(prefix)
    );

    // S√≥ validar termos se n√£o for callback permitido E se for em grupo
    return !isAllowedCallback && ctx.callbackQuery?.message?.chat?.type !== 'private';
  }

  private async validateUserTermsForCallback(ctx: any): Promise<boolean> {
    try {
      const hasAccepted = await this.termsAcceptanceService.hasUserAcceptedCurrentTerms(
        ctx.from.id,
        ctx.callbackQuery.message.chat.id
      );

      if (!hasAccepted) {
        await ctx.answerCbQuery(
          `üö´ Voc√™ precisa aceitar os termos de responsabilidade antes de usar funcionalidades do grupo!`,
          { show_alert: true }
        );
        
        this.logger.log(`üö´ Callback bloqueado para usu√°rio ${ctx.from.id} - termos n√£o aceitos`);
        return false;
      }

      return true;
    } catch (error) {
      this.logger.error(`Erro na valida√ß√£o de termos (callback) para usu√°rio ${ctx.from.id}:`, error);
      await ctx.answerCbQuery('‚ùå Erro na valida√ß√£o. Tente novamente.', { show_alert: true });
      return false;
    }
  }

  async onApplicationShutdown(signal: string) {
    this.logger.log(`üõë Application shutting down (${signal})`);
    this.logger.log('üõë Telegram Bot managed by NestJS will be stopped automatically.');
  }
}
