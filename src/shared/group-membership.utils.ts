import { Logger } from '@nestjs/common';
import { Telegraf } from 'telegraf';
import { TextCommandContext } from '../telegram/telegram.types';

const logger = new Logger('GroupMembershipUtils');

export async function validateActiveMembership(
  ctx: TextCommandContext,
  bot: Telegraf,
  operationType: 'criar' | 'aceitar' | 'concluir' | 'cancelar' | 'participar' = 'participar'
): Promise<boolean> {
  try {
    // Para comandos em grupos, verificar se usu√°rio est√° ativo no pr√≥prio grupo
    if (ctx.chat.type !== 'private') {
      return await checkMembershipInGroup(ctx.from.id, ctx.chat.id, bot, ctx, operationType);
    } else {
      // Para comandos privados, verificar no grupo configurado
      const configuredGroupId = parseInt(process.env.TELEGRAM_GROUP_ID || '0');
      
      if (configuredGroupId === 0) {
        logger.warn('‚ö†Ô∏è TELEGRAM_GROUP_ID n√£o configurado');
        return false;
      }
      
      return await checkMembershipInGroup(ctx.from.id, configuredGroupId, bot, ctx, operationType);
    }
  } catch (error: any) {
    logger.error(`Erro na valida√ß√£o de membro ativo para usu√°rio ${ctx.from.id}:`, error);
    return false;
  }
}

async function checkMembershipInGroup(
  userId: number,
  groupId: number,
  bot: Telegraf,
  ctx: TextCommandContext,
  operationType: string
): Promise<boolean> {
  try {
    const memberInfo = await bot.telegram.getChatMember(groupId, userId);
    const activeMemberStatuses = ['member', 'administrator', 'creator'];
    
    // Verificar se o status indica membro ativo
    const isActiveMember = activeMemberStatuses.includes(memberInfo.status);
    
    if (!isActiveMember) {
      logger.warn(`Usu√°rio ${userId} n√£o √© membro ativo do grupo ${groupId}. Status: ${memberInfo.status}`);
      
      // Se n√£o for comando em grupo (privado), mostrar APENAS popup
      if (ctx.chat.type === 'private') {
        const actionText = getActionText(operationType);
        
        try {
          if (ctx.answerCbQuery) {
            await ctx.answerCbQuery(
              `üö´ Voc√™ n√£o √© mais um membro ativo do grupo!\n\n` +
              `Status atual: ${memberInfo.status}\n\n` +
              `üìã Para ${actionText}:\n` +
              `1Ô∏è‚É£ Entre novamente no grupo do TrustScore\n` +
              `2Ô∏è‚É£ Certifique-se de permanecer como membro`,
              { show_alert: true }
            );
          }
        } catch {
          // Fallback com mensagem mais curta
          try {
            if (ctx.answerCbQuery) {
              await ctx.answerCbQuery(
                `üö´ Voc√™ n√£o √© mais um membro ativo do grupo (Status: ${memberInfo.status})!`,
                { show_alert: true }
              );
            }
          } catch {
            // Falha silenciosa - n√£o poluir o chat
          }
        }
      }
      
      return false;
    }

    logger.log(`‚úÖ Usu√°rio ${userId} √© membro ativo do grupo ${groupId} (Status: ${memberInfo.status})`);
    return true;
  } catch (error: any) {
    logger.error(`Erro ao verificar membro ${userId} no grupo ${groupId}:`, error);
    
    // Se o erro for "user not found" ou similar, considerar como n√£o-membro
    if (error.message?.includes('user not found') || error.message?.includes('chat not found')) {
      if (ctx.chat.type === 'private') {
        const actionText = getActionText(operationType);
        
        try {
          if (ctx.answerCbQuery) {
            await ctx.answerCbQuery(
              `üö´ N√£o foi poss√≠vel verificar sua participa√ß√£o no grupo!\n\n` +
              `üìã Para ${actionText}:\n` +
              `1Ô∏è‚É£ Certifique-se de estar no grupo do TrustScore\n` +
              `2Ô∏è‚É£ Tente novamente em alguns minutos`,
              { show_alert: true }
            );
          }
        } catch {
          // Fallback com mensagem mais curta
          try {
            if (ctx.answerCbQuery) {
              await ctx.answerCbQuery(
                `üö´ N√£o foi poss√≠vel verificar sua participa√ß√£o no grupo!`,
                { show_alert: true }
              );
            }
          } catch {
            // Falha silenciosa - n√£o poluir o chat
          }
        }
      }
      return false;
    }
    
    // Para outros erros, assumir que √© membro (fallback seguro)
    logger.warn(`Assumindo que usu√°rio ${userId} √© membro devido a erro na verifica√ß√£o`);
    return true;
  }
}

function getActionText(operationType: string): string {
  switch (operationType) {
    case 'criar': return 'criar opera√ß√µes';
    case 'aceitar': return 'aceitar opera√ß√µes';
    case 'concluir': return 'concluir opera√ß√µes';
    case 'cancelar': return 'cancelar opera√ß√µes';
    default: return 'participar de opera√ß√µes';
  }
}

export async function validateActiveMembershipForCallback(
  ctx: any,
  bot: Telegraf,
  operationType: string = 'participar'
): Promise<boolean> {
  try {
    const chatType = ctx.callbackQuery.message.chat.type;
    
    // Se est√° em chat privado, verificar no grupo configurado
    if (chatType === 'private') {
      const configuredGroupId = parseInt(process.env.TELEGRAM_GROUP_ID || '0');
      if (configuredGroupId === 0) {
        // Nenhum grupo configurado - POPUP ENCURTADO
        await ctx.answerCbQuery(
          `üö´ ACESSO NEGADO\n\n` +
          `‚ùå Nenhum grupo configurado!\n\n` +
          `üìã PARA CONTINUAR:\n` +
          `1Ô∏è‚É£ Configure TELEGRAM_GROUP_ID\n` +
          `2Ô∏è‚É£ Reinicie o bot`,
          { show_alert: true }
        );
        return false;
      }
      
      return await checkMembershipInGroup(ctx.from.id, configuredGroupId, bot, ctx, operationType);
    } else {
      // Se est√° em grupo, verificar no pr√≥prio grupo
      const groupId = ctx.callbackQuery.message.chat.id;
      const memberInfo = await bot.telegram.getChatMember(groupId, ctx.from.id);
      const activeMemberStatuses = ['member', 'administrator', 'creator'];
      
      const isActiveMember = activeMemberStatuses.includes(memberInfo.status);
      
      if (!isActiveMember) {
        await ctx.answerCbQuery(
          `üö´ Voc√™ n√£o √© mais um membro ativo do grupo para ${getActionText(operationType)}! Status: ${memberInfo.status}`,
          { show_alert: true }
        );
        return false;
      }
      
      return true;
    }
  } catch (error: any) {
    logger.error(`Erro na valida√ß√£o de membro ativo (callback) para usu√°rio ${ctx.from.id}:`, error);
    
    if (error.message?.includes('user not found') || error.message?.includes('chat not found')) {
      await ctx.answerCbQuery(
        `üö´ N√£o foi poss√≠vel verificar sua participa√ß√£o no grupo!`,
        { show_alert: true }
      );
      return false;
    }
    
    // Para outros erros, assumir que √© membro (fallback seguro)
    return true;
  }
}