import { Injectable, Logger } from '@nestjs/common';
import { Types } from 'mongoose';
import { TermsAcceptanceRepository } from './terms-acceptance.repository';
import { UsersService } from './users.service';
import { GroupsService } from '../groups/groups.service';

export interface TermsAcceptanceData {
  userId: Types.ObjectId;
  groupId: Types.ObjectId;
  userTelegramId: number;
  groupTelegramId: number;
  termsVersion: string;
  ipAddress?: string;
  userAgent?: string;
}

@Injectable()
export class TermsAcceptanceService {
  private readonly logger = new Logger(TermsAcceptanceService.name);
  private readonly CURRENT_TERMS_VERSION = '1.0.0';

  constructor(
    private readonly termsAcceptanceRepository: TermsAcceptanceRepository,
    private readonly usersService: UsersService,
    private readonly groupsService: GroupsService,
  ) {}

  async hasUserAcceptedCurrentTerms(
    userTelegramId: number,
    groupTelegramId: number
  ): Promise<boolean> {
    return this.termsAcceptanceRepository.hasUserAcceptedTerms(
      userTelegramId,
      groupTelegramId,
      this.CURRENT_TERMS_VERSION
    );
  }

  async recordUserAcceptance(
    userTelegramId: number,
    groupTelegramId: number,
    ipAddress?: string,
    userAgent?: string
  ): Promise<void> {
    try {
      // Buscar ou criar usu√°rio
      const user = await this.usersService.findOrCreate({
        id: userTelegramId,
        first_name: 'Usu√°rio',
      });

      // Buscar ou criar grupo
      const group = await this.groupsService.findOrCreate({
        id: groupTelegramId,
        title: `Grupo ${groupTelegramId}`,
      });

      // Verificar se j√° aceitou os termos atuais
      const alreadyAccepted = await this.hasUserAcceptedCurrentTerms(
        userTelegramId,
        groupTelegramId
      );

      if (alreadyAccepted) {
        this.logger.warn(
          `User ${userTelegramId} already accepted current terms for group ${groupTelegramId}`
        );
        return;
      }

      // Registrar aceita√ß√£o
      await this.termsAcceptanceRepository.recordTermsAcceptance(
        user._id,
        group._id,
        userTelegramId,
        groupTelegramId,
        this.CURRENT_TERMS_VERSION,
        ipAddress,
        userAgent
      );

      this.logger.log(
        `Terms acceptance recorded for user ${userTelegramId} in group ${groupTelegramId}`
      );
    } catch (error) {
      this.logger.error(
        `Failed to record terms acceptance for user ${userTelegramId}:`,
        error
      );
      throw error;
    }
  }

  async getUserAcceptanceHistory(userTelegramId: number) {
    return this.termsAcceptanceRepository.getUserAcceptanceHistory(userTelegramId);
  }

  async getGroupStats(groupTelegramId: number) {
    return this.termsAcceptanceRepository.getGroupAcceptanceStats(groupTelegramId);
  }

  async removeUserFromGroup(
    userTelegramId: number,
    groupTelegramId: number
  ): Promise<void> {
    try {
      // Remover registro de aceita√ß√£o de termos
      await this.termsAcceptanceRepository.removeUserAcceptance(
        userTelegramId,
        groupTelegramId
      );

      this.logger.log(
        `Removed terms acceptance for user ${userTelegramId} from group ${groupTelegramId}`
      );
    } catch (error) {
      this.logger.error(
        `Failed to remove user ${userTelegramId} from group ${groupTelegramId}:`,
        error
      );
      throw error;
    }
  }

  getCurrentTermsVersion(): string {
    return this.CURRENT_TERMS_VERSION;
  }

  getTermsText(): string {
    return (
      `üìã **TERMO DE RESPONSABILIDADE - TRUSTSCORE**\n\n` +
      `Ao utilizar a plataforma TrustScore, voc√™ declara que:\n\n` +
      `1Ô∏è‚É£ **Responsabilidade:** Todas as transa√ß√µes s√£o de sua total responsabilidade.\n\n` +
      `2Ô∏è‚É£ **Veracidade:** Fornecer√° informa√ß√µes verdadeiras e precisas.\n\n` +
      `3Ô∏è‚É£ **Conformidade:** Cumprir√° com todos os acordos estabelecidos.\n\n` +
      `4Ô∏è‚É£ **Riscos:** Compreende os riscos envolvidos em transa√ß√µes P2P.\n\n` +
      `5Ô∏è‚É£ **Isen√ß√£o:** A plataforma trust score √© apenas um ponto de encontro, onde membros negociam livremente com seus pr√≥prios termos. N√£o temos responsabilidade pelas transa√ß√µes entre membros. N√£o nos responsabilizamos por perdas.\n\n` +
      `6Ô∏è‚É£ **Privacidade:** Seus dados ser√£o tratados conforme nossa pol√≠tica de privacidade.\n\n` +
      `7Ô∏è‚É£ **Proibi√ß√µes:** N√£o utilizar√° a plataforma para atividades il√≠citas.\n\n` +
      `‚ö†Ô∏è **IMPORTANTE:** Ao clicar em 'ACEITO OS TERMOS', voc√™ concorda integralmente com estas condi√ß√µes.`
    );
  }
}