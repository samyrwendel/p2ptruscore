import { Injectable, Logger } from '@nestjs/common';
import { Types } from 'mongoose';
import { TermsAcceptanceRepository } from './terms-acceptance.repository';
import { UsersService } from './users.service';
import { GroupsService } from '../groups/groups.service';

export interface TermsAcceptanceData {
  userId: Types.ObjectId;
  groupId: Types.ObjectId;
  userTelegramId: number;
  groupTelegramId: number;
  termsVersion: string;
  ipAddress?: string;
  userAgent?: string;
}

@Injectable()
export class TermsAcceptanceService {
  private readonly logger = new Logger(TermsAcceptanceService.name);
  private readonly CURRENT_TERMS_VERSION = '1.1.0';

  constructor(
    private readonly termsAcceptanceRepository: TermsAcceptanceRepository,
    private readonly usersService: UsersService,
    private readonly groupsService: GroupsService,
  ) {}

  async hasUserAcceptedCurrentTerms(
    userTelegramId: number,
    groupTelegramId: number
  ): Promise<boolean> {
    return this.termsAcceptanceRepository.hasUserAcceptedTerms(
      userTelegramId,
      groupTelegramId,
      this.CURRENT_TERMS_VERSION
    );
  }

  async recordUserAcceptance(
    userTelegramId: number,
    groupTelegramId: number,
    ipAddress?: string,
    userAgent?: string
  ): Promise<void> {
    try {
      // Buscar ou criar usu√°rio
      const user = await this.usersService.findOrCreate({
        id: userTelegramId,
        first_name: 'Usu√°rio',
      });

      // Buscar ou criar grupo
      const group = await this.groupsService.findOrCreate({
        id: groupTelegramId,
        title: `Grupo ${groupTelegramId}`,
      });

      // Verificar se j√° aceitou os termos atuais
      const alreadyAccepted = await this.hasUserAcceptedCurrentTerms(
        userTelegramId,
        groupTelegramId
      );

      if (alreadyAccepted) {
        this.logger.warn(
          `User ${userTelegramId} already accepted current terms for group ${groupTelegramId}`
        );
        return;
      }

      // Registrar aceita√ß√£o
      await this.termsAcceptanceRepository.recordTermsAcceptance(
        user._id,
        group._id,
        userTelegramId,
        groupTelegramId,
        this.CURRENT_TERMS_VERSION,
        ipAddress,
        userAgent
      );

      this.logger.log(
        `Terms acceptance recorded for user ${userTelegramId} in group ${groupTelegramId}`
      );
    } catch (error) {
      this.logger.error(
        `Failed to record terms acceptance for user ${userTelegramId}:`,
        error
      );
      throw error;
    }
  }

  async getUserAcceptanceHistory(userTelegramId: number) {
    return this.termsAcceptanceRepository.getUserAcceptanceHistory(userTelegramId);
  }

  async getGroupStats(groupTelegramId: number) {
    return this.termsAcceptanceRepository.getGroupAcceptanceStats(groupTelegramId);
  }

  async removeUserFromGroup(
    userTelegramId: number,
    groupTelegramId: number
  ): Promise<void> {
    try {
      // Remover registro de aceita√ß√£o de termos
      await this.termsAcceptanceRepository.removeUserAcceptance(
        userTelegramId,
        groupTelegramId
      );

      this.logger.log(
        `Removed terms acceptance for user ${userTelegramId} from group ${groupTelegramId}`
      );
    } catch (error) {
      this.logger.error(
        `Failed to remove user ${userTelegramId} from group ${groupTelegramId}:`,
        error
      );
      throw error;
    }
  }

  getCurrentTermsVersion(): string {
    return this.CURRENT_TERMS_VERSION;
  }

  getTermsText(): string {
    return (
      `üìã **TERMO DE RESPONSABILIDADE - TRUSTSCORE P2P**\n\n` +
      `üéØ **OBJETIVO:** Este grupo facilita transa√ß√µes P2P de criptomoedas sem KYC, priorizando privacidade e seguran√ßa entre membros verificados.\n\n` +
      `üìú **REGRAS E RESPONSABILIDADES:**\n\n` +
      `1Ô∏è‚É£ **Responsabilidade Total:** Todas as negocia√ß√µes s√£o de sua exclusiva responsabilidade. O TrustScore √© apenas uma ferramenta de reputa√ß√£o.\n\n` +
      `2Ô∏è‚É£ **Limite Inicial:** Para come√ßar, opera√ß√µes limitadas a R$ 600,00. Construa reputa√ß√£o gradualmente.\n\n` +
      `3Ô∏è‚É£ **Prioridade de Envio:** Quem tem MENOR reputa√ß√£o no TrustScore deve enviar primeiro (crit√©rio de seguran√ßa).\n\n` +
      `4Ô∏è‚É£ **Contas Pr√≥prias:** Pagamentos devem ser feitos exclusivamente de contas pr√≥prias (CPF ou CNPJ pr√≥prio).\n\n` +
      `5Ô∏è‚É£ **Execu√ß√£o Imediata:** Boletos devem ser pagos no mesmo dia. Evite agendamentos.\n\n` +
      `6Ô∏è‚É£ **Verifica√ß√£o de Membros:** Sempre confirme se a pessoa est√° no mesmo grupo antes de negociar.\n\n` +
      `7Ô∏è‚É£ **Cautela com Feriados:** Seja cauteloso com valores altos em v√©speras de feriados e finais de semana.\n\n` +
      `8Ô∏è‚É£ **Conduta √âtica:** Tentativas de fraude resultam em banimento permanente da comunidade.\n\n` +
      `9Ô∏è‚É£ **Negocia√ß√µes Privadas:** Todas as tratativas devem ser feitas no privado entre os interessados.\n\n` +
      `üîü **Isen√ß√£o de Responsabilidade:** A comunidade e o bot n√£o se responsabilizam por perdas ou problemas nas negocia√ß√µes.\n\n` +
      `‚ö†Ô∏è **ACEITAR OS TERMOS significa concordar com todas essas condi√ß√µes e assumir total responsabilidade por suas a√ß√µes.**`
    );
  }
}