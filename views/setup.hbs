<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{title}}</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            padding: 20px;
        }
        
        .container {
            max-width: 800px;
            margin: 0 auto;
            background: white;
            border-radius: 12px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            overflow: hidden;
        }
        
        .header {
            background: #2c3e50;
            color: white;
            padding: 30px;
            text-align: center;
        }
        
        .header h1 {
            font-size: 2.5em;
            margin-bottom: 10px;
        }
        
        .header p {
            opacity: 0.9;
            font-size: 1.1em;
        }
        
        .content {
            padding: 40px;
        }
        
        .status {
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 30px;
            text-align: center;
        }
        
        .status.configured {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        
        .status.not-configured {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        
        .form-group {
            margin-bottom: 25px;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 600;
            color: #2c3e50;
        }
        
        .form-group input, .form-group textarea {
            width: 100%;
            padding: 12px 16px;
            border: 2px solid #e1e8ed;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s;
        }
        
        .form-group input:focus, .form-group textarea:focus {
            outline: none;
            border-color: #667eea;
        }
        
        .form-group small {
            display: block;
            margin-top: 5px;
            color: #6c757d;
            font-size: 14px;
        }
        
        .btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: transform 0.2s;
            margin-right: 10px;
        }
        
        .btn:hover {
            transform: translateY(-2px);
        }
        
        .btn-secondary {
            background: #6c757d;
        }
        
        .alert {
            padding: 15px;
            border-radius: 8px;
            margin-bottom: 20px;
            display: none;
        }
        
        .alert.success {
            background: #d4edda;
            color: #155724;
            border: 1px solid #c3e6cb;
        }
        
        .alert.error {
            background: #f8d7da;
            color: #721c24;
            border: 1px solid #f5c6cb;
        }
        
        .help-links {
            text-align: center;
            margin-top: 30px;
            padding-top: 30px;
            border-top: 1px solid #e1e8ed;
        }
        
        .help-links a {
            color: #667eea;
            text-decoration: none;
            margin: 0 15px;
            font-weight: 500;
        }
        
        .help-links a:hover {
            text-decoration: underline;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>ü§ñ TrustScore Bot</h1>
            <p>Configura√ß√£o Inicial do Sistema</p>
        </div>
        
        <div class="content">
            {{#if isConfigured}}
                <div class="status configured">
                    ‚úÖ <strong>Bot Configurado!</strong><br>
                    O sistema est√° pronto para uso. Voc√™ pode ajustar as configura√ß√µes abaixo se necess√°rio.
                </div>
            {{else}}
                <div class="status not-configured">
                    ‚ö†Ô∏è <strong>Configura√ß√£o Necess√°ria</strong><br>
                    Configure o token do bot e outras informa√ß√µes para come√ßar a usar o sistema.
                </div>
            {{/if}}
            
            <div id="alert" class="alert"></div>
            
            <form id="configForm">
                <div class="form-group">
                    <label for="TELEGRAM_BOT_TOKEN">üîë Token do Bot Telegram</label>
                    <input type="text" id="TELEGRAM_BOT_TOKEN" name="TELEGRAM_BOT_TOKEN" 
                           value="{{config.TELEGRAM_BOT_TOKEN}}" 
                           placeholder="1234567890:ABCdefGHIjklMNOpqrsTUVwxyz">
                    <small>Obtenha em @BotFather no Telegram</small>
                </div>
                
                <div class="form-group">
                    <label for="TELEGRAM_BOT_USERNAME">üë§ Username do Bot</label>
                    <input type="text" id="TELEGRAM_BOT_USERNAME" name="TELEGRAM_BOT_USERNAME" 
                           value="{{config.TELEGRAM_BOT_USERNAME}}" 
                           placeholder="meu_bot">
                    <small>Username sem @ (exemplo: trustscore_bot)</small>
                </div>
                
                <div class="form-group">
                    <label for="TELEGRAM_GROUPS">üë• IDs dos Grupos</label>
                    <textarea id="TELEGRAM_GROUPS" name="TELEGRAM_GROUPS" rows="3" 
                              placeholder="-1001234567890,-1009876543210">{{config.TELEGRAM_GROUPS}}</textarea>
                    <small>IDs dos grupos separados por v√≠rgula (n√∫meros negativos)</small>
                </div>
                
                <div class="form-group">
                    <label for="CURRENCY_API_KEY">üí± Chave da API de Cota√ß√µes</label>
                    <input type="text" id="CURRENCY_API_KEY" name="CURRENCY_API_KEY" 
                           value="{{config.CURRENCY_API_KEY}}" 
                           placeholder="3d7237cbd0d3ee56ce8eeaac087135beddf5d8fc3292dc5ae44acfee97d86918">
                    <small>Chave da AwesomeAPI para cota√ß√µes de moedas (opcional)</small>
                </div>
                
                <div class="form-group">
                    <label for="MONGODB_CNN">üóÑÔ∏è MongoDB Connection</label>
                    <input type="text" id="MONGODB_CNN" name="MONGODB_CNN" 
                           value="{{config.MONGODB_CNN}}">
                    <small>String de conex√£o do MongoDB (j√° configurada para Docker)</small>
                </div>
                
                <div class="form-group">
                    <label for="PORT">üåê Porta da Aplica√ß√£o</label>
                    <input type="number" id="PORT" name="PORT" 
                           value="{{config.PORT}}" min="1000" max="65535">
                    <small>Porta onde a aplica√ß√£o ser√° executada</small>
                </div>
                
                <button type="submit" class="btn">üíæ Salvar Configura√ß√£o</button>
                <button type="button" class="btn btn-secondary" onclick="testConnection()">üîç Testar Conex√£o</button>
            </form>
            
            <div class="help-links">
                <a href="/setup/help">üìö Ajuda</a>
                <a href="/config/status">üìä Status do Sistema</a>
                <a href="http://localhost:8081" target="_blank">üóÑÔ∏è MongoDB Express</a>
            </div>
        </div>
    </div>
    
    <script>
        document.getElementById('configForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const config = Object.fromEntries(formData.entries());
            
            try {
                const response = await fetch('/setup/save', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(config)
                });
                
                const result = await response.json();
                
                const alert = document.getElementById('alert');
                alert.style.display = 'block';
                
                if (result.success) {
                    alert.className = 'alert success';
                    alert.innerHTML = '‚úÖ ' + result.message;
                    
                    if (result.restart_required) {
                        setTimeout(() => {
                            alert.innerHTML += '<br><br>üîÑ <strong>Reinicie o container Docker para aplicar as mudan√ßas.</strong>';
                        }, 2000);
                    }
                } else {
                    alert.className = 'alert error';
                    alert.innerHTML = '‚ùå ' + result.message;
                }
            } catch (error) {
                const alert = document.getElementById('alert');
                alert.style.display = 'block';
                alert.className = 'alert error';
                alert.innerHTML = '‚ùå Erro ao salvar: ' + error.message;
            }
        });
        
        async function testConnection() {
            const alert = document.getElementById('alert');
            alert.style.display = 'block';
            alert.className = 'alert';
            alert.innerHTML = 'üîç Testando conex√£o...';
            
            try {
                const response = await fetch('/setup/status');
                const status = await response.json();
                
                if (status.ready) {
                    alert.className = 'alert success';
                    alert.innerHTML = '‚úÖ Todas as configura√ß√µes est√£o corretas!';
                } else {
                    alert.className = 'alert error';
                    alert.innerHTML = '‚ö†Ô∏è Algumas configura√ß√µes precisam ser ajustadas.';
                }
            } catch (error) {
                alert.className = 'alert error';
                alert.innerHTML = '‚ùå Erro ao testar conex√£o: ' + error.message;
            }
        }
    </script>
</body>
</html>