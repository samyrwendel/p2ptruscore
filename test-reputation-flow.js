// Script para testar o fluxo de reputa√ß√£o e identificar onde a distribui√ß√£o est√° sumindo
require('dotenv').config({ path: '.env.development' });
const { MongoClient } = require('mongodb');

async function testReputationFlow() {
  const uri = process.env.MONGODB_CNN || 'mongodb://localhost:27017/trustscore';
  console.log('üîó Conectando ao MongoDB:', uri.replace(/:\/\/.*@/, '://***:***@'));
  const client = new MongoClient(uri);
  
  try {
    await client.connect();
    console.log('üîó Conectado ao MongoDB');
    
    const db = client.db('trustscore_bot');
    const usersCollection = db.collection('users');
    const karmaCollection = db.collection('karmas');
    
    // Buscar usu√°rio samyralmeida
    console.log('\nüë§ Buscando usu√°rio samyralmeida...');
    const user = await usersCollection.findOne({
      $or: [
        { userName: 'samyralmeida' },
        { firstName: 'samyralmeida' }
      ]
    });
    
    if (!user) {
      console.log('‚ùå Usu√°rio samyralmeida n√£o encontrado');
      return;
    }
    
    console.log('‚úÖ Usu√°rio encontrado:', {
      userId: user.userId,
      userName: user.userName,
      firstName: user.firstName
    });
    
    // Buscar karma do usu√°rio no grupo principal
    console.log('\nüìä Buscando karma no grupo principal (-1002907400287)...');
    const karmaDoc = await karmaCollection.findOne({
      user: user._id,
      group: -1002907400287
    });
    
    if (!karmaDoc) {
      console.log('‚ùå Karma n√£o encontrado no grupo principal');
      
      // Buscar em todos os grupos
      console.log('\nüîç Buscando karma em todos os grupos...');
      const allKarma = await karmaCollection.find({ user: user._id }).toArray();
      console.log(`üìã Encontrados ${allKarma.length} documentos de karma`);
      
      allKarma.forEach((doc, index) => {
        console.log(`\nüìÑ Documento ${index + 1}:`);
        console.log(`  Group: ${doc.group}`);
        console.log(`  Karma: ${doc.karma}`);
        console.log(`  Contadores: 5‚≠ê:${doc.stars5 || 0}, 4‚≠ê:${doc.stars4 || 0}, 3‚≠ê:${doc.stars3 || 0}, 2‚≠ê:${doc.stars2 || 0}, 1‚≠ê:${doc.stars1 || 0}`);
        console.log(`  Hist√≥rico: ${doc.history ? doc.history.length : 0} entradas`);
      });
      
      return;
    }
    
    console.log('‚úÖ Karma encontrado no grupo principal:');
    console.log(`  Karma Total: ${karmaDoc.karma}`);
    console.log(`  Given Karma: ${karmaDoc.givenKarma || 0}`);
    console.log(`  Given Hate: ${karmaDoc.givenHate || 0}`);
    console.log(`  Contadores de estrelas:`);
    console.log(`    5‚≠ê: ${karmaDoc.stars5 || 0}`);
    console.log(`    4‚≠ê: ${karmaDoc.stars4 || 0}`);
    console.log(`    3‚≠ê: ${karmaDoc.stars3 || 0}`);
    console.log(`    2‚≠ê: ${karmaDoc.stars2 || 0}`);
    console.log(`    1‚≠ê: ${karmaDoc.stars1 || 0}`);
    console.log(`  Hist√≥rico: ${karmaDoc.history ? karmaDoc.history.length : 0} entradas`);
    
    if (karmaDoc.history && karmaDoc.history.length > 0) {
      console.log('\nüìã √öltimas 5 avalia√ß√µes:');
      const recent = karmaDoc.history.slice(-5);
      recent.forEach((entry, index) => {
        console.log(`  ${index + 1}. ${entry.starRating ? entry.starRating + '‚≠ê' : (entry.karmaChange > 0 ? 'üëç' : 'üëé')}: "${entry.comment || 'Sem coment√°rio'}"`);
      });
    }
    
    // Simular o que o getKarmaForUserWithFallback faria
    console.log('\nüîÑ Simulando getKarmaForUserWithFallback...');
    
    // Primeiro tentar buscar karma no grupo atual (chat privado seria positivo)
    const chatId = 12345; // Simular chat privado
    console.log(`Tentando buscar karma no chat ${chatId}...`);
    
    const groupKarma = await karmaCollection.findOne({
      user: user._id,
      group: chatId
    });
    
    if (!groupKarma) {
      console.log('‚ùå N√£o encontrado no chat atual, fazendo fallback...');
      
      // Simular busca de karma total (isso n√£o retorna contadores)
      console.log('üìä Karma total seria buscado via KarmaService.getTotalKarmaForUser');
      console.log('‚ö†Ô∏è  Esse m√©todo N√ÉO retorna contadores de estrelas!');
      
      // Simular busca do hist√≥rico do grupo principal
      console.log('üîç Buscando hist√≥rico do grupo principal para contadores...');
      const karmaWithHistory = await karmaCollection.findOne({
        user: user._id,
        group: -1002907400287
      });
      
      if (karmaWithHistory) {
        console.log('‚úÖ Hist√≥rico encontrado com contadores:');
        console.log(`  5‚≠ê: ${karmaWithHistory.stars5 || 0}`);
        console.log(`  4‚≠ê: ${karmaWithHistory.stars4 || 0}`);
        console.log(`  3‚≠ê: ${karmaWithHistory.stars3 || 0}`);
        console.log(`  2‚≠ê: ${karmaWithHistory.stars2 || 0}`);
        console.log(`  1‚≠ê: ${karmaWithHistory.stars1 || 0}`);
        console.log(`  Hist√≥rico: ${karmaWithHistory.history ? karmaWithHistory.history.length : 0} entradas`);
      } else {
        console.log('‚ùå Hist√≥rico n√£o encontrado no grupo principal!');
      }
    }
    
  } catch (error) {
    console.error('‚ùå Erro:', error);
  } finally {
    await client.close();
    console.log('üîå Conex√£o fechada');
  }
}

// Executar o teste
testReputationFlow().catch(console.error);